{"ast":null,"code":"(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document) {\n    return;\n  }\n\n  var callbacks = [];\n  var map = {};\n\n  var noop = function noop() {};\n\n  Prism.plugins.toolbar = {};\n  /**\n   * @typedef ButtonOptions\n   * @property {string} text The text displayed.\n   * @property {string} [url] The URL of the link which will be created.\n   * @property {Function} [onClick] The event listener for the `click` event of the created button.\n   * @property {string} [className] The class attribute to include with element.\n   */\n\n  /**\n   * Register a button callback with the toolbar.\n   *\n   * @param {string} key\n   * @param {ButtonOptions|Function} opts\n   */\n\n  var registerButton = Prism.plugins.toolbar.registerButton = function (key, opts) {\n    var callback;\n\n    if (typeof opts === 'function') {\n      callback = opts;\n    } else {\n      callback = function callback(env) {\n        var element;\n\n        if (typeof opts.onClick === 'function') {\n          element = document.createElement('button');\n          element.type = 'button';\n          element.addEventListener('click', function () {\n            opts.onClick.call(this, env);\n          });\n        } else if (typeof opts.url === 'string') {\n          element = document.createElement('a');\n          element.href = opts.url;\n        } else {\n          element = document.createElement('span');\n        }\n\n        if (opts.className) {\n          element.classList.add(opts.className);\n        }\n\n        element.textContent = opts.text;\n        return element;\n      };\n    }\n\n    if (key in map) {\n      console.warn('There is a button with the key \"' + key + '\" registered already.');\n      return;\n    }\n\n    callbacks.push(map[key] = callback);\n  };\n  /**\n   * Post-highlight Prism hook callback.\n   *\n   * @param env\n   */\n\n\n  var hook = Prism.plugins.toolbar.hook = function (env) {\n    // Check if inline or actual code block (credit to line-numbers plugin)\n    var pre = env.element.parentNode;\n\n    if (!pre || !/pre/i.test(pre.nodeName)) {\n      return;\n    } // Autoloader rehighlights, so only do this once.\n\n\n    if (pre.parentNode.classList.contains('code-toolbar')) {\n      return;\n    } // Create wrapper for <pre> to prevent scrolling toolbar with content\n\n\n    var wrapper = document.createElement(\"div\");\n    wrapper.classList.add(\"code-toolbar\");\n    pre.parentNode.insertBefore(wrapper, pre);\n    wrapper.appendChild(pre); // Setup the toolbar\n\n    var toolbar = document.createElement('div');\n    toolbar.classList.add('toolbar');\n\n    if (document.body.hasAttribute('data-toolbar-order')) {\n      callbacks = document.body.getAttribute('data-toolbar-order').split(',').map(function (key) {\n        return map[key] || noop;\n      });\n    }\n\n    callbacks.forEach(function (callback) {\n      var element = callback(env);\n\n      if (!element) {\n        return;\n      }\n\n      var item = document.createElement('div');\n      item.classList.add('toolbar-item');\n      item.appendChild(element);\n      toolbar.appendChild(item);\n    }); // Add our toolbar to the currently created wrapper of <pre> tag\n\n    wrapper.appendChild(toolbar);\n  };\n\n  registerButton('label', function (env) {\n    var pre = env.element.parentNode;\n\n    if (!pre || !/pre/i.test(pre.nodeName)) {\n      return;\n    }\n\n    if (!pre.hasAttribute('data-label')) {\n      return;\n    }\n\n    var element, template;\n    var text = pre.getAttribute('data-label');\n\n    try {\n      // Any normal text will blow up this selector.\n      template = document.querySelector('template#' + text);\n    } catch (e) {}\n\n    if (template) {\n      element = template.content;\n    } else {\n      if (pre.hasAttribute('data-url')) {\n        element = document.createElement('a');\n        element.href = pre.getAttribute('data-url');\n      } else {\n        element = document.createElement('span');\n      }\n\n      element.textContent = text;\n    }\n\n    return element;\n  });\n  /**\n   * Register the toolbar with Prism.\n   */\n\n  Prism.hooks.add('complete', hook);\n})();","map":{"version":3,"sources":["C:/Proyectos/simac/node_modules/prismjs/plugins/toolbar/prism-toolbar.js"],"names":["self","Prism","document","callbacks","map","noop","plugins","toolbar","registerButton","key","opts","callback","env","element","onClick","createElement","type","addEventListener","call","url","href","className","classList","add","textContent","text","console","warn","push","hook","pre","parentNode","test","nodeName","contains","wrapper","insertBefore","appendChild","body","hasAttribute","getAttribute","split","forEach","item","template","querySelector","e","content","hooks"],"mappings":"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","sourcesContent":["(function(){\n\tif (typeof self === 'undefined' || !self.Prism || !self.document) {\n\t\treturn;\n\t}\n\n\tvar callbacks = [];\n\tvar map = {};\n\tvar noop = function() {};\n\n\tPrism.plugins.toolbar = {};\n\n\t/**\n\t * @typedef ButtonOptions\n\t * @property {string} text The text displayed.\n\t * @property {string} [url] The URL of the link which will be created.\n\t * @property {Function} [onClick] The event listener for the `click` event of the created button.\n\t * @property {string} [className] The class attribute to include with element.\n\t */\n\n\t/**\n\t * Register a button callback with the toolbar.\n\t *\n\t * @param {string} key\n\t * @param {ButtonOptions|Function} opts\n\t */\n\tvar registerButton = Prism.plugins.toolbar.registerButton = function (key, opts) {\n\t\tvar callback;\n\n\t\tif (typeof opts === 'function') {\n\t\t\tcallback = opts;\n\t\t} else {\n\t\t\tcallback = function (env) {\n\t\t\t\tvar element;\n\n\t\t\t\tif (typeof opts.onClick === 'function') {\n\t\t\t\t\telement = document.createElement('button');\n\t\t\t\t\telement.type = 'button';\n\t\t\t\t\telement.addEventListener('click', function () {\n\t\t\t\t\t\topts.onClick.call(this, env);\n\t\t\t\t\t});\n\t\t\t\t} else if (typeof opts.url === 'string') {\n\t\t\t\t\telement = document.createElement('a');\n\t\t\t\t\telement.href = opts.url;\n\t\t\t\t} else {\n\t\t\t\t\telement = document.createElement('span');\n\t\t\t\t}\n\n\t\t\t\tif (opts.className) {\n\t\t\t\t\telement.classList.add(opts.className);\n\t\t\t\t}\n\n\t\t\t\telement.textContent = opts.text;\n\n\t\t\t\treturn element;\n\t\t\t};\n\t\t}\n\n\t\tif (key in map) {\n\t\t\tconsole.warn('There is a button with the key \"' + key + '\" registered already.');\n\t\t\treturn;\n\t\t}\n\n\t\tcallbacks.push(map[key] = callback);\n\t};\n\n\t/**\n\t * Post-highlight Prism hook callback.\n\t *\n\t * @param env\n\t */\n\tvar hook = Prism.plugins.toolbar.hook = function (env) {\n\t\t// Check if inline or actual code block (credit to line-numbers plugin)\n\t\tvar pre = env.element.parentNode;\n\t\tif (!pre || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Autoloader rehighlights, so only do this once.\n\t\tif (pre.parentNode.classList.contains('code-toolbar')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Create wrapper for <pre> to prevent scrolling toolbar with content\n\t\tvar wrapper = document.createElement(\"div\");\n\t\twrapper.classList.add(\"code-toolbar\");\n\t\tpre.parentNode.insertBefore(wrapper, pre);\n\t\twrapper.appendChild(pre);\n\n\t\t// Setup the toolbar\n\t\tvar toolbar = document.createElement('div');\n\t\ttoolbar.classList.add('toolbar');\n\n\t\tif (document.body.hasAttribute('data-toolbar-order')) {\n\t\t\tcallbacks = document.body.getAttribute('data-toolbar-order').split(',').map(function(key) {\n\t\t\t\treturn map[key] || noop;\n\t\t\t});\n\t\t}\n\n\t\tcallbacks.forEach(function(callback) {\n\t\t\tvar element = callback(env);\n\n\t\t\tif (!element) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar item = document.createElement('div');\n\t\t\titem.classList.add('toolbar-item');\n\n\t\t\titem.appendChild(element);\n\t\t\ttoolbar.appendChild(item);\n\t\t});\n\n\t\t// Add our toolbar to the currently created wrapper of <pre> tag\n\t\twrapper.appendChild(toolbar);\n\t};\n\n\tregisterButton('label', function(env) {\n\t\tvar pre = env.element.parentNode;\n\t\tif (!pre || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!pre.hasAttribute('data-label')) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar element, template;\n\t\tvar text = pre.getAttribute('data-label');\n\t\ttry {\n\t\t\t// Any normal text will blow up this selector.\n\t\t\ttemplate = document.querySelector('template#' + text);\n\t\t} catch (e) {}\n\n\t\tif (template) {\n\t\t\telement = template.content;\n\t\t} else {\n\t\t\tif (pre.hasAttribute('data-url')) {\n\t\t\t\telement = document.createElement('a');\n\t\t\t\telement.href = pre.getAttribute('data-url');\n\t\t\t} else {\n\t\t\t\telement = document.createElement('span');\n\t\t\t}\n\n\t\t\telement.textContent = text;\n\t\t}\n\n\t\treturn element;\n\t});\n\n\t/**\n\t * Register the toolbar with Prism.\n\t */\n\tPrism.hooks.add('complete', hook);\n})();\n"]},"metadata":{},"sourceType":"script"}