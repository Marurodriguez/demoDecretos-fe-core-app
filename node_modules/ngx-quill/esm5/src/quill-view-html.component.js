import { __decorate, __param } from "tslib";
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import { Component, Inject, Input, ViewEncapsulation } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
var QuillViewHTMLComponent = /** @class */ (function () {
    function QuillViewHTMLComponent(sanitizer, config) {
        this.sanitizer = sanitizer;
        this.config = config;
        this.innerHTML = '';
        this.themeClass = 'ql-snow';
        this.content = '';
    }
    QuillViewHTMLComponent.prototype.ngOnChanges = function (changes) {
        if (changes.theme) {
            var theme = changes.theme.currentValue || (this.config.theme ? this.config.theme : 'snow');
            this.themeClass = "ql-" + theme + " ngx-quill-view-html";
        }
        else if (!this.theme) {
            var theme = this.config.theme ? this.config.theme : 'snow';
            this.themeClass = "ql-" + theme + " ngx-quill-view-html";
        }
        if (changes.content) {
            this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue);
        }
    };
    QuillViewHTMLComponent.ctorParameters = function () { return [
        { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }
    ]; };
    __decorate([
        Input()
    ], QuillViewHTMLComponent.prototype, "content", void 0);
    __decorate([
        Input()
    ], QuillViewHTMLComponent.prototype, "theme", void 0);
    QuillViewHTMLComponent = __decorate([ __param(0, Inject(DomSanitizer)),
        __param(1, Inject(QUILL_CONFIG_TOKEN))
    ], QuillViewHTMLComponent);
QuillViewHTMLComponent.ɵfac = function QuillViewHTMLComponent_Factory(t) { return new (t || QuillViewHTMLComponent)(ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN)); };
QuillViewHTMLComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QuillViewHTMLComponent, selectors: [["quill-view-html"]], inputs: { content: "content", theme: "theme" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [[1, "ql-container", 3, "ngClass"], [1, "ql-editor", 3, "innerHTML"]], template: function QuillViewHTMLComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.themeClass);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("innerHTML", ctx.innerHTML, ɵngcc0.ɵɵsanitizeHtml);
    } }, directives: [ɵngcc1.NgClass], styles: ["\n.ql-container.ngx-quill-view-html {\n  border: 0;\n}\n"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillViewHTMLComponent, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                selector: 'quill-view-html',
                template: "\n  <div class=\"ql-container\" [ngClass]=\"themeClass\">\n    <div class=\"ql-editor\" [innerHTML]=\"innerHTML\">\n    </div>\n  </div>\n",
                styles: ["\n.ql-container.ngx-quill-view-html {\n  border: 0;\n}\n"]
            }]
    }], function () { return [{ type: DomSanitizer, decorators: [{
                type: Inject,
                args: [DomSanitizer]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [QUILL_CONFIG_TOKEN]
            }] }]; }, { content: [{
            type: Input
        }], theme: [{
            type: Input
        }] }); })();
    return QuillViewHTMLComponent;
}());
export { QuillViewHTMLComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwtdmlldy1odG1sLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmd4LXF1aWxsL3NyYy9xdWlsbC12aWV3LWh0bWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBRWxFLE9BQU8sRUFBRSxrQkFBa0IsRUFBZSxNQUFNLDJCQUEyQixDQUFBO0FBRTNFLE9BQU8sRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLEtBQUssRUFHTCxpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUE7OztBQWlCdEI7QUFBMEQsSUFPeEQsZ0NBQ2dDLFNBQXVCLEVBQ2pCLE1BQW1CO0FBQ3hELFFBRitCLGNBQVMsR0FBVCxTQUFTLENBQWM7QUFBQyxRQUNsQixXQUFNLEdBQU4sTUFBTSxDQUFhO0FBQzNELFFBVEUsY0FBUyxHQUFhLEVBQUUsQ0FBQTtBQUMxQixRQUFFLGVBQVUsR0FBRyxTQUFTLENBQUE7QUFDeEIsUUFDVyxZQUFPLEdBQUcsRUFBRSxDQUFBO0FBQ3ZCLElBS0ssQ0FBQztBQUNOLElBQ0UsNENBQVcsR0FBWCxVQUFZLE9BQXNCO0FBQ3BDLFFBQUksSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO0FBQ3ZCLFlBQU0sSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ2xHLFlBQU0sSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFNLEtBQUsseUJBQXNCLENBQUE7QUFDekQsU0FBSztBQUFDLGFBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDNUIsWUFBTSxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtBQUNsRSxZQUFNLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBTSxLQUFLLHlCQUFzQixDQUFBO0FBQ3pELFNBQUs7QUFDTCxRQUFJLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtBQUN6QixZQUFNLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBQzNGLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDRjtBQUNpRSxnQkFqQnJCLFlBQVksdUJBQXBELE1BQU0sU0FBQyxZQUFZO0FBQVMsZ0RBQzVCLE1BQU0sU0FBQyxrQkFBa0I7QUFBUTtBQUFVLElBTHJDO0FBQ1gsUUFERyxLQUFLLEVBQUU7QUFBQywyREFBWTtBQUN0QixJQUFVO0FBQWEsUUFBckIsS0FBSyxFQUFFO0FBQUMseURBQWM7QUFFekIsSUFQYSxzQkFBc0Isd0JBZmxDLFNBQVMsQ0FBQyxjQUNULGpDQWNNLENBUUgsV0FBQSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUE7V0F0QlYsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLG5DQXNCWixRQUN0QixXQUFBLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0VBdEI3QixRQUFRLEVBQUUsaUJBQWlCLDdCQXNCRyxPQVRuQixzQkFBc0IsQ0F3QmxDO1dBL0JDLFFBQVEsRUFBRSw0SUFLWCx1QkFWVTtvQ0FJVixXQU9BLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkEwQkY7QUFBQyxJQURELDZCQUFDO0FBQ0EsQ0FEQSxBQXhCRCxJQXdCQztBQUNELFNBekJhLHNCQUFzQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInXG5cbmltcG9ydCB7IFFVSUxMX0NPTkZJR19UT0tFTiwgUXVpbGxDb25maWcgfSBmcm9tICcuL3F1aWxsLWVkaXRvci5pbnRlcmZhY2VzJ1xuXG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEluamVjdCxcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0VuY2Fwc3VsYXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcblxuQENvbXBvbmVudCh7XG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIHNlbGVjdG9yOiAncXVpbGwtdmlldy1odG1sJyxcbiAgc3R5bGVzOiBbYFxuLnFsLWNvbnRhaW5lci5uZ3gtcXVpbGwtdmlldy1odG1sIHtcbiAgYm9yZGVyOiAwO1xufVxuYF0sXG4gIHRlbXBsYXRlOiBgXG4gIDxkaXYgY2xhc3M9XCJxbC1jb250YWluZXJcIiBbbmdDbGFzc109XCJ0aGVtZUNsYXNzXCI+XG4gICAgPGRpdiBjbGFzcz1cInFsLWVkaXRvclwiIFtpbm5lckhUTUxdPVwiaW5uZXJIVE1MXCI+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuYFxufSlcbmV4cG9ydCBjbGFzcyBRdWlsbFZpZXdIVE1MQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgaW5uZXJIVE1MOiBTYWZlSHRtbCA9ICcnXG4gIHRoZW1lQ2xhc3MgPSAncWwtc25vdydcblxuICBASW5wdXQoKSBjb250ZW50ID0gJydcbiAgQElucHV0KCkgdGhlbWU/OiBzdHJpbmdcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KERvbVNhbml0aXplcikgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcixcbiAgICBASW5qZWN0KFFVSUxMX0NPTkZJR19UT0tFTikgcHJpdmF0ZSBjb25maWc6IFF1aWxsQ29uZmlnXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMudGhlbWUpIHtcbiAgICAgIGNvbnN0IHRoZW1lID0gY2hhbmdlcy50aGVtZS5jdXJyZW50VmFsdWUgfHwgKHRoaXMuY29uZmlnLnRoZW1lID8gdGhpcy5jb25maWcudGhlbWUgOiAnc25vdycpXG4gICAgICB0aGlzLnRoZW1lQ2xhc3MgPSBgcWwtJHt0aGVtZX0gbmd4LXF1aWxsLXZpZXctaHRtbGBcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnRoZW1lKSB7XG4gICAgICBjb25zdCB0aGVtZSA9IHRoaXMuY29uZmlnLnRoZW1lID8gdGhpcy5jb25maWcudGhlbWUgOiAnc25vdydcbiAgICAgIHRoaXMudGhlbWVDbGFzcyA9IGBxbC0ke3RoZW1lfSBuZ3gtcXVpbGwtdmlldy1odG1sYFxuICAgIH1cbiAgICBpZiAoY2hhbmdlcy5jb250ZW50KSB7XG4gICAgICB0aGlzLmlubmVySFRNTCA9IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKGNoYW5nZXMuY29udGVudC5jdXJyZW50VmFsdWUpXG4gICAgfVxuICB9XG59XG4iXX0=