import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, HostListener } from '@angular/core';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["ngx-charts-circle", ""];
let CircleComponent = class CircleComponent {
    constructor() {
        this.select = new EventEmitter();
        this.activate = new EventEmitter();
        this.deactivate = new EventEmitter();
    }
    onClick() {
        this.select.emit(this.data);
    }
    onMouseEnter() {
        this.activate.emit(this.data);
    }
    onMouseLeave() {
        this.deactivate.emit(this.data);
    }
    ngOnChanges(changes) {
        this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';
        this.classNames += 'circle';
    }
};
CircleComponent.ɵfac = function CircleComponent_Factory(t) { return new (t || CircleComponent)(); };
CircleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CircleComponent, selectors: [["g", "ngx-charts-circle", ""]], hostBindings: function CircleComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function CircleComponent_click_HostBindingHandler() { return ctx.onClick(); })("mouseenter", function CircleComponent_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function CircleComponent_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); });
    } }, inputs: { classNames: "classNames", cx: "cx", cy: "cy", r: "r", fill: "fill", stroke: "stroke", data: "data", circleOpacity: "circleOpacity", pointerEvents: "pointerEvents" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c0, decls: 1, vars: 8, template: function CircleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "circle");
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("cx", ctx.cx)("cy", ctx.cy)("r", ctx.r)("fill", ctx.fill)("stroke", ctx.stroke)("opacity", ctx.circleOpacity)("class", ctx.classNames)("pointer-events", ctx.pointerEvents);
    } }, encapsulation: 2, changeDetection: 0 });
__decorate([
    Input()
], CircleComponent.prototype, "cx", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "cy", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "r", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "fill", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "stroke", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "data", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "classNames", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "circleOpacity", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "pointerEvents", void 0);
__decorate([
    Output()
], CircleComponent.prototype, "select", void 0);
__decorate([
    Output()
], CircleComponent.prototype, "activate", void 0);
__decorate([
    Output()
], CircleComponent.prototype, "deactivate", void 0);
__decorate([
    HostListener('click')
], CircleComponent.prototype, "onClick", null);
__decorate([
    HostListener('mouseenter')
], CircleComponent.prototype, "onMouseEnter", null);
__decorate([
    HostListener('mouseleave')
], CircleComponent.prototype, "onMouseLeave", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CircleComponent, [{
        type: Component,
        args: [{
                selector: 'g[ngx-charts-circle]',
                template: `
    <svg:circle
      [attr.cx]="cx"
      [attr.cy]="cy"
      [attr.r]="r"
      [attr.fill]="fill"
      [attr.stroke]="stroke"
      [attr.opacity]="circleOpacity"
      [attr.class]="classNames"
      [attr.pointer-events]="pointerEvents"
    />
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return []; }, { select: [{
            type: Output
        }], activate: [{
            type: Output
        }], deactivate: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], onMouseEnter: [{
            type: HostListener,
            args: ['mouseenter']
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave']
        }], classNames: [{
            type: Input
        }], cx: [{
            type: Input
        }], cy: [{
            type: Input
        }], r: [{
            type: Input
        }], fill: [{
            type: Input
        }], stroke: [{
            type: Input
        }], data: [{
            type: Input
        }], circleOpacity: [{
            type: Input
        }], pointerEvents: [{
            type: Input
        }] }); })();
export { CircleComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiQHN3aW1sYW5lL25neC1jaGFydHMvbGliL2NvbW1vbi9jaXJjbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFFTCxNQUFNLEVBQ04sWUFBWSxFQUVaLHVCQUF1QixFQUN2QixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7Ozs7QUFrQnZCLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7QUFBRyxJQUEvQjtBQUFnQixRQVdKLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3hDLFFBQVksYUFBUSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7QUFDMUMsUUFBWSxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUM1QyxJQW9CQSxDQUFDO0FBQ0QsSUFuQkUsT0FBTztBQUNULFFBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hDLElBQUUsQ0FBQztBQUNILElBRUUsWUFBWTtBQUFLLFFBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLElBQUUsQ0FBQztBQUNILElBRUUsWUFBWTtBQUFLLFFBQ2YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BDLElBQUUsQ0FBQztBQUNILElBQ0UsV0FBVyxDQUFDLE9BQXNCO0FBQUksUUFDcEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUN0RixRQUFJLElBQUksQ0FBQyxVQUFVLElBQUksUUFBUSxDQUFDO0FBQ2hDLElBQUUsQ0FBQztBQUNILENBQUM7Ozs7Ozs7OztpREFBQTtBQWpDVTtBQUNGLElBRE4sS0FBSyxFQUFFO0FBQUMsMkNBQUc7QUFDSDtBQUNGLElBRE4sS0FBSyxFQUFFO0FBQUMsMkNBQUc7QUFDSDtBQUNELElBRFAsS0FBSyxFQUFFO0FBQUMsMENBQUU7QUFDRjtBQUNKLElBREosS0FBSyxFQUFFO0FBQUMsNkNBQUs7QUFDTDtBQUNOLElBREYsS0FBSyxFQUFFO0FBQUMsK0NBQU87QUFDUDtBQUNKLElBREosS0FBSyxFQUFFO0FBQUMsNkNBQUs7QUFDTDtBQUNWLElBREUsS0FBSyxFQUFFO0FBQUMsbURBQVc7QUFDWDtBQUFhLElBQXJCLEtBQUssRUFBRTtBQUFDLHNEQUFjO0FBQ2Q7QUFBYSxJQUFyQixLQUFLLEVBQUU7QUFBQyxzREFBYztBQUViO0FBQWEsSUFBdEIsTUFBTSxFQUFFO0FBQUMsK0NBQTRCO0FBQzVCO0FBQWEsSUFBdEIsTUFBTSxFQUFFO0FBQUMsaURBQThCO0FBQzlCO0FBQWEsSUFBdEIsTUFBTSxFQUFFO0FBQUMsbURBQWdDO0FBRzFDO0FBQ0QsSUFGRSxZQUFZLENBQUMsT0FBTyxDQUFDO0FBQ3hCLDhDQUVHO0FBR0Q7QUFBYSxJQURaLFlBQVksQ0FBQyxZQUFZLENBQUM7QUFDN0IsbURBRUc7QUFHRDtBQUFhLElBRFosWUFBWSxDQUFDLFlBQVksQ0FBQztBQUM3QixtREFFRztBQTVCVSxlQUFlLG9CQWhCM0IsU0FBUyxDQUFDLFVBQ1QsUUFBUSxFQUFFO2FBQXNCLFVBQ2hDO01BQVEsRUFBRTs7Ozs7Ozs7OztDQVdULFVBQ0QsZUFBZSxFQUFFO21CQUF1QixDQUFDLE1BQU0sTUFDaEQsQ0FBQyxJQUNXOztDQUFlLENBa0MzQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsU0FuQ1ksZUFBZTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIE9uQ2hhbmdlcyxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIEhvc3RMaXN0ZW5lclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZ1tuZ3gtY2hhcnRzLWNpcmNsZV0nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzdmc6Y2lyY2xlXG4gICAgICBbYXR0ci5jeF09XCJjeFwiXG4gICAgICBbYXR0ci5jeV09XCJjeVwiXG4gICAgICBbYXR0ci5yXT1cInJcIlxuICAgICAgW2F0dHIuZmlsbF09XCJmaWxsXCJcbiAgICAgIFthdHRyLnN0cm9rZV09XCJzdHJva2VcIlxuICAgICAgW2F0dHIub3BhY2l0eV09XCJjaXJjbGVPcGFjaXR5XCJcbiAgICAgIFthdHRyLmNsYXNzXT1cImNsYXNzTmFtZXNcIlxuICAgICAgW2F0dHIucG9pbnRlci1ldmVudHNdPVwicG9pbnRlckV2ZW50c1wiXG4gICAgLz5cbiAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQ2lyY2xlQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgY3g7XG4gIEBJbnB1dCgpIGN5O1xuICBASW5wdXQoKSByO1xuICBASW5wdXQoKSBmaWxsO1xuICBASW5wdXQoKSBzdHJva2U7XG4gIEBJbnB1dCgpIGRhdGE7XG4gIEBJbnB1dCgpIGNsYXNzTmFtZXM7XG4gIEBJbnB1dCgpIGNpcmNsZU9wYWNpdHk7XG4gIEBJbnB1dCgpIHBvaW50ZXJFdmVudHM7XG5cbiAgQE91dHB1dCgpIHNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGFjdGl2YXRlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgZGVhY3RpdmF0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIG9uQ2xpY2soKSB7XG4gICAgdGhpcy5zZWxlY3QuZW1pdCh0aGlzLmRhdGEpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VlbnRlcicpXG4gIG9uTW91c2VFbnRlcigpOiB2b2lkIHtcbiAgICB0aGlzLmFjdGl2YXRlLmVtaXQodGhpcy5kYXRhKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlbGVhdmUnKVxuICBvbk1vdXNlTGVhdmUoKTogdm9pZCB7XG4gICAgdGhpcy5kZWFjdGl2YXRlLmVtaXQodGhpcy5kYXRhKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICB0aGlzLmNsYXNzTmFtZXMgPSBBcnJheS5pc0FycmF5KHRoaXMuY2xhc3NOYW1lcykgPyB0aGlzLmNsYXNzTmFtZXMuam9pbignICcpIDogJyc7XG4gICAgdGhpcy5jbGFzc05hbWVzICs9ICdjaXJjbGUnO1xuICB9XG59XG4iXX0=