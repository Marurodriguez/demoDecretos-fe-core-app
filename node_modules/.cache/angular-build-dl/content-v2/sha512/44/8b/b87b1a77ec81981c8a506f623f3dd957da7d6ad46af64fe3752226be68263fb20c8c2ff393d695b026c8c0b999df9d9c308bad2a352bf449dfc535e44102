{"version":3,"sources":["webpack:///src/app/pages/asiento/listado/asiento-listado.component.ts","webpack:///src/app/pages/asiento/listado/asiento-listado.component.html"],"names":["TipoVistaEnum","AsientoListadoComponent","dataService","appConfig","cd","router","route","authUserService","serializer","functionService","userService","calendar","titleBarService","loaded","isCollapsed","asientos","posAsiento","fecha","fechaFin","page","size","tipoVista","original","loading","paginateData","sizeAnt","pageAnt","fechaAnt","selectTipoVistaOption","getToday","empresa","getEmpresaSelected","title","subTitle","monedaVista","monedaPrimaria","searchable","name","initValueTipoVista","items","principal","nombre","secundaria","monedaSecundaria","TipoVistaSelected","id","markForCheck","reg","monto","tasa","tasaMoneda","str","cuenta","moneda","Number","debitoMonedaSecundaria","creditoMonedaSecundaria","formatMoney","codigo","debitoMonedaPrimaria","creditoMonedaPrimaria","getDebito","tipoVistaReg","undefined","fieldName","row","date","getDateFromString","formatDate","registros","length","tipoOperacion","numeroOperacion","negocio","entidad","ex","tipo","sumDebito","sumcredito","asiento","refresh","force","year","month","day","paginateListModel","addParameter","getIdEmpresaSelected","toString","fechaInit","httpFunction","ASIENTO_PAGINATE_DTO","debito","paginate","httpOperation","http","data","ws","enumUrl","content","urlResource","alert","selector","templateUrl","styleUrls"],"mappings":"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","file":"default~pages-asiento-asiento-module~pages-balance-balance-module-es5.js","sourcesContent":["import { ChangeDetectorRef, Component, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router, UrlSerializer } from '@angular/router';\r\nimport { NgbCalendar, NgbDate } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AppConfig } from '../../../../../../coreApp/src/app/app.config';\r\nimport { PaginateDataModel } from '../../../../../../coreApp/src/app/models/PaginateData.model';\r\nimport { PaginateListModel } from '../../../../../../coreApp/src/app/models/PaginateList.model';\r\nimport { PaginateParametersModel } from '../../../../../../coreApp/src/app/models/PaginateParameters.model';\r\nimport { DataService } from '../../../../../../coreApp/src/app/services/data.services';\r\nimport { FunctionService } from '../../../../../../coreApp/src/app/services/function.services';\r\nimport { AuthUserService } from '../../../../../../coreApp/src/app/shared/auth/auth-user.service';\r\nimport { SmSelectOptions } from '../../../../../../coreApp/src/app/shared/components/sm-select/sm-select.component';\r\nimport { AsientoModel } from '../../../models/Asiento.model';\r\nimport { AsientoRegistroModel } from '../../../models/AsientoRegistro.model';\r\nimport { CuentaContableModel } from '../../../models/CuentaContable.model';\r\nimport { EmpresaModel } from '../../../models/Empresa.model';\r\nimport { MonedaModel } from '../../../models/Moneda.model';\r\nimport { enumWS } from '../../../navigation/ws/ws-routes.config';\r\nimport { TitleBarService } from '../../../services/TitleBar.service';\r\nimport { UserService } from '../../../services/User.service';\r\n\r\n\r\nexport enum TipoVistaEnum {\r\n  original=0, // Muestra los registros en la moneda en que se crearon\r\n  principal=1, // Muestra todos los registros en la moneda principal, haciendo las conversiones.\r\n  secundaria=2 // Muestra todos los registros en la moneda secundaria, haciendo las conversiones.\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'asiento-listado',\r\n  templateUrl: './asiento-listado.component.html',\r\n  styleUrls: ['./asiento-listado.component.scss']\r\n})\r\n\r\nexport class AsientoListadoComponent {\r\n  /************************************************************************************************************************\r\n   * Inputs && Outputs && Properties\r\n   *\r\n   ************************************************************************************************************************/\r\n  \r\n  /************************************************************************************************************************\r\n   * Variables\r\n   *\r\n   ************************************************************************************************************************/\r\n    public loaded: boolean = false;\r\n    public isCollapsed:boolean = false;\r\n    public asientos:AsientoModel[] = [];\r\n    public posAsiento: number = 0;\r\n    public fecha: NgbDate = new NgbDate(2020,9,26);\r\n    public fechaFin: NgbDate = new NgbDate(2022,1,1);\r\n    public page: number = 0;\r\n    public size: number = 10;\r\n    public tipoVista: TipoVistaEnum = TipoVistaEnum.original;\r\n    public monedaVista: MonedaModel; \r\n    \r\n    public loading: boolean = false; \r\n    public paginateData: PaginateDataModel = new PaginateDataModel();\r\n    public empresa: EmpresaModel; \r\n    public sizeAnt: number = this.size;\r\n    public pageAnt: number = this.page;\r\n    public fechaAnt:NgbDate = new NgbDate(2022,9,26);\r\n\r\n    public selectTipoVistaOption = new SmSelectOptions();\r\n    public initValueTipoVista: any;\r\n\r\n\r\n    /************************************************************************************************************************\r\n    * Constructor && Implements\r\n    *\r\n    ************************************************************************************************************************/\r\n   constructor(public dataService: DataService,\r\n               public appConfig: AppConfig, private cd: ChangeDetectorRef,\r\n               public router: Router, public route: ActivatedRoute,\r\n               public authUserService: AuthUserService, \r\n               public serializer: UrlSerializer, public functionService: FunctionService, public userService: UserService,\r\n               public calendar: NgbCalendar, public titleBarService: TitleBarService){\r\n    \r\n    // Primer día del mes  \r\n    // this.fecha= this.calendar.getToday();\r\n    this.fechaFin = this.calendar.getToday();\r\n    this.empresa = this.userService.getEmpresaSelected();\r\n    this.titleBarService.title = \"Libro Diario\";\r\n    this.titleBarService.subTitle = \"Desde esta pantalla se ven los registros del Libro Diario\";\r\n    this.monedaVista = this.empresa.monedaPrimaria;\r\n\r\n    this.selectTipoVistaOption.searchable =false;\r\n    this.selectTipoVistaOption.name =\"TipoVista-Select\";\r\n    this.initValueTipoVista = {\"id\":TipoVistaEnum.original, \"nombre\":\"Original\"};\r\n    this.selectTipoVistaOption.items = [\r\n                                        {\"id\":TipoVistaEnum.original, \"nombre\":\"Original\"},\r\n                                        {\"id\":TipoVistaEnum.principal, \"nombre\":this.empresa.monedaPrimaria.nombre},\r\n                                        {\"id\":TipoVistaEnum.secundaria, \"nombre\":this.empresa.monedaSecundaria.nombre},\r\n                                          ];\r\n    \r\n   }\r\n   tipoVistaChange(TipoVistaSelected:any){\r\n    switch(TipoVistaSelected.id){\r\n      case 0:\r\n        this.tipoVista = TipoVistaEnum.original;\r\n        this.monedaVista = this.empresa.monedaPrimaria;\r\n      break;\r\n      case 1: \r\n        this.tipoVista = TipoVistaEnum.principal;\r\n        this.monedaVista = this.empresa.monedaPrimaria;\r\n      break;\r\n      case 2:\r\n        this.tipoVista = TipoVistaEnum.secundaria;\r\n        this.monedaVista = this.empresa.monedaSecundaria;\r\n      break;\r\n    }\r\n\r\n    this.cd.markForCheck();\r\n   }\r\n   /**\r\n    * Muestra el resumen del monto de la moneda secundaria\r\n    * para saber como se transformo, con la tasa..\r\n    * @param reg \r\n    */\r\n   getMonedaAclaracion(reg: AsientoRegistroModel): string {\r\n    let monto: number = 0; \r\n    let tasa: number = reg.tasaMoneda;\r\n    let str: string = \"\";\r\n\r\n    switch(this.tipoVista){\r\n      case TipoVistaEnum.original:\r\n        // Si se tiene que mostrar según la moneda que se ingreso, \r\n        // entonces si la moneda ingresada es la secundaría se pone la aclaración\r\n        if(reg.cuenta.moneda.id == this.empresa.monedaSecundaria.id){\r\n          monto = Number(reg.debitoMonedaSecundaria + reg.creditoMonedaSecundaria);\r\n          // Moneda secundaria se muestra con la tasa para la conversión\r\n          str = this.functionService.formatMoney(monto,reg.cuenta.moneda.codigo);\r\n          str = str + \" x \" + this.functionService.formatMoney(tasa,\" \");\r\n          str = \"(\" + str + \") = \"  + this.functionService.formatMoney(tasa*monto,this.empresa.monedaPrimaria.codigo);          \r\n        }\r\n      break;\r\n      case TipoVistaEnum.principal:\r\n        // Si se tiene que mostrar siempre la moneda principal, entonces\r\n        // Si es una moneda secundaria se debe poner la aclaración\r\n        if(reg.cuenta.moneda.id == this.empresa.monedaSecundaria.id){\r\n          monto = Number(reg.debitoMonedaSecundaria + reg.creditoMonedaSecundaria);\r\n          // Moneda secundaria se muestra con la tasa para la conversión\r\n          str = this.functionService.formatMoney(monto,reg.cuenta.moneda.codigo);\r\n          str = str + \" x \" + this.functionService.formatMoney(tasa,\" \");\r\n          str = \"(\" + str + \") = \"  + this.functionService.formatMoney(tasa*monto,this.empresa.monedaPrimaria.codigo);\r\n        }\r\n      break;\r\n      case TipoVistaEnum.secundaria:\r\n        // Si se debe mostrar en moneda secundaría entonces, si es una moneda\r\n        // Principal se debe mostrar la aclaración\r\n        if(reg.cuenta.moneda.id == this.empresa.monedaPrimaria.id){\r\n          monto = (reg.debitoMonedaPrimaria + reg.creditoMonedaPrimaria);\r\n          str = this.functionService.formatMoney(monto,reg.cuenta.moneda.codigo);\r\n          str = str + \" / \" + this.functionService.formatMoney(tasa,\" \");\r\n          str = \"(\" + str + \") = \"  + this.functionService.formatMoney(monto/tasa,this.empresa.monedaSecundaria.codigo);\r\n    \r\n        }\r\n      break;\r\n    }\r\n\r\n    // if(reg.cuenta.moneda.id == this.monedaVista.id){\r\n    //   monto = Number(reg.debitoMonedaPrimaria + reg.creditoMonedaPrimaria);\r\n    //   if(this.tipoVista == TipoVistaEnum.secundaria){\r\n    //     str = this.functionService.formatMoney(monto,reg.cuenta.moneda.codigo);\r\n    //     str = str + \" / \" + this.functionService.formatMoney(tasa,\" \");\r\n    //     str = \"(\" + str + \") = \"  + this.functionService.formatMoney(monto/tasa,this.empresa.monedaPrimaria.codigo);\r\n    //   }\r\n    // }else{\r\n    //   monto = Number(reg.debitoMonedaSecundaria + reg.creditoMonedaSecundaria);\r\n    //   // Moneda secundaria se muestra con la tasa para la conversión\r\n    //   str = this.functionService.formatMoney(monto,reg.cuenta.moneda.codigo);\r\n    //   str = str + \" x \" + this.functionService.formatMoney(tasa,\" \");\r\n    //   str = \"(\" + str + \") = \"  + this.functionService.formatMoney(tasa*monto,this.empresa.monedaPrimaria.codigo);\r\n    // }\r\n    \r\n\r\n    return str;\r\n   }\r\n   getMonedaSegunVista(reg: AsientoRegistroModel): MonedaModel{\r\n    switch(this.tipoVista){\r\n      case TipoVistaEnum.original:\r\n        return reg.cuenta.moneda;\r\n      case TipoVistaEnum.principal:\r\n        return this.empresa.monedaPrimaria;\r\n      break;\r\n      case TipoVistaEnum.secundaria:\r\n        return this.empresa.monedaSecundaria;  \r\n      break;\r\n     }\r\n     return reg.cuenta.moneda;\r\n   }\r\n\r\n   /**\r\n    * \r\n    * @param reg Puede ser AsientoRegistro o Asiento\r\n    * @param getDebito Si es true devuelve el debito, y si es false devuelve el credito\r\n    * @returns el total en la moneda expresada\r\n    */\r\n   getTotalSegunMoneda(reg: any, getDebito: boolean): number{\r\n    let tipoVistaReg: TipoVistaEnum = this.tipoVista;\r\n    if(tipoVistaReg == TipoVistaEnum.original){\r\n      if(reg.cuenta == undefined){ //Se trata de un asiento principal\r\n        tipoVistaReg = TipoVistaEnum.principal; \r\n      }else{\r\n        if(reg.cuenta.moneda.id == this.empresa.monedaPrimaria.id){\r\n          tipoVistaReg = TipoVistaEnum.principal; \r\n        }else{\r\n          tipoVistaReg = TipoVistaEnum.secundaria; \r\n        }\r\n      }\r\n      \r\n    }\r\n\r\n    switch(tipoVistaReg){\r\n      case TipoVistaEnum.principal:\r\n        if(getDebito == true){\r\n          return reg.debitoMonedaPrimaria;\r\n        }else{\r\n          return reg.creditoMonedaPrimaria;\r\n        }\r\n      break;\r\n      case TipoVistaEnum.secundaria:\r\n        if(getDebito == true){\r\n          return reg.debitoMonedaSecundaria;\r\n        }else{\r\n          return reg.creditoMonedaSecundaria;\r\n        }        \r\n      break;\r\n      default:\r\n        return -1;\r\n      break;\r\n     }\r\n     \r\n   }\r\n\r\n   getField(fieldName: string, row: AsientoModel){\r\n    switch(fieldName){\r\n      case \"fecha\":\r\n        let date: Date = this.functionService.getDateFromString(row.fecha, \"-\");\r\n        return this.functionService.formatDate(date);\r\n      break;\r\n      case \"cantidadRegistros\":\r\n        if(row.registros && row?.registros.length > 0){\r\n          return row.registros.length;\r\n        }else{\r\n          return 0;\r\n        }\r\n      break;\r\n      case \"operacion\":\r\n        if(row.tipoOperacion){\r\n          return row.tipoOperacion.nombre;\r\n        }\r\n      break;\r\n      case \"numero-operacion\":\r\n        return row.numeroOperacion;\r\n      break;\r\n    }\r\n   }\r\n\r\n   getFieldReg(fieldName: string, row: AsientoRegistroModel) {\r\n    try{\r\n      switch(fieldName){\r\n        case \"negocio\":\r\n          if(row.negocio && row.negocio.nombre) {\r\n            return row.negocio.nombre;\r\n          }\r\n        break;\r\n        case \"entidad\":\r\n          if(row.entidad && row.entidad.nombre) {\r\n            return row.entidad.nombre;\r\n          }\r\n        break;  \r\n      }\r\n    }catch(ex){\r\n      return \"\";\r\n    }\r\n    return \"\";\r\n   }\r\n\r\n   getTotal(tipo: string){\r\n    let sumDebito: number = 0;\r\n    let sumcredito: number = 0;\r\n    for(let asiento of this.asientos){\r\n      for(let reg of asiento.registros){\r\n        sumDebito = sumDebito + reg.debitoMonedaPrimaria;\r\n        sumcredito = sumcredito + reg.creditoMonedaPrimaria;\r\n      }\r\n    }\r\n    if(tipo == 'debito'){\r\n      return sumDebito;\r\n    }else{\r\n      return sumcredito;\r\n    }\r\n   }\r\n\r\n   /************************************************************************************************************************\r\n    *\r\n    * Eventos\r\n    *\r\n    ************************************************************************************************************************/\r\n    ngOnInit() {\r\n      this.refresh(true);\r\n    }\r\n\r\n\r\n   /************************************************************************************************************************\r\n    * FUNCTIONS\r\n    *\r\n    ************************************************************************************************************************/\r\n    refresh(force: boolean){\r\n      if (   !(this.pageAnt != this.page || this.sizeAnt != this.size || (this.fechaAnt.year != this.fechaAnt.year || this.fecha.month != this.fechaAnt.month || this.fecha.day != this.fechaAnt.day)) && force == false) {\r\n        return; //No hubo cambios!\r\n      }\r\n      this.pageAnt = this.page;\r\n      this.fechaAnt.day = this.fecha.day;\r\n      this.fechaAnt.month = this.fecha.month;\r\n      this.fechaAnt.year = this.fecha.year;\r\n\r\n      let paginateListModel: PaginateListModel = new PaginateListModel(this.page,this.size);\r\n      paginateListModel.addParameter(\"empresa\",this.userService.getIdEmpresaSelected().toString());\r\n\r\n      //FechaInit! --> La fecha seleccionada\r\n      let fechaInit: string = this.fecha.year + '-' + this.fecha.month + '-' + this.fecha.day + ' 00:00:01';\r\n      let fechaFin: string = this.fechaFin.year + '-' + this.fechaFin.month + '-' + this.fechaFin.day + ' 23:59:59';\r\n\r\n      paginateListModel.addParameter(\"fechaInicio\",fechaInit);\r\n      paginateListModel.addParameter(\"fechaFin\",fechaFin);\r\n\r\n      this.dataService.httpFunction(enumWS.ASIENTO_PAGINATE_DTO,this,paginateListModel);\r\n\r\n\r\n      this.loading = true;\r\n    } \r\n   \r\n   \r\n   getClass(reg):string{\r\n      try{\r\n        if(reg.debito > 0){\r\n          return \"reg-debe\";\r\n        }else{\r\n          return \"reg-haber\";\r\n        }\r\n      }catch(ex){\r\n        return \"\";\r\n      }\r\n\r\n    }\r\n\r\n    SetPage(paginate: PaginateListModel){\r\n      this.page = paginate.page;\r\n      this.size = paginate.size; \r\n      this.refresh(false);\r\n    }\r\n\r\n\r\n  /************************************************************************************************************************\r\n   *\r\n   * RESPONSE OK/ERROR\r\n   *\r\n   ************************************************************************************************************************/\r\n\r\n\r\n   responseOk(httpOperation:any, http: string, data:PaginateDataModel, ws:any ){\r\n      switch(ws.enumUrl) {\r\n        case enumWS.ASIENTO_PAGINATE_DTO:\r\n          this.paginateData = data;\r\n          this.asientos = data.content;\r\n          this.loaded = true;\r\n          this.cd.markForCheck();\r\n        break;\r\n    }\r\n   }\r\n\r\n   responseError(urlResource: string,httpOperation: string, data: any, ws?: any){\r\n    switch(ws.enumUrl) {\r\n      case enumWS.ASIENTO_PAGINATE_DTO:\r\n        alert(\"error en el paginado\");\r\n      break;\r\n  }\r\n   }\r\n}\r\n","<section id=\"collapse\">\r\n    <div class=\"row mt-2 mb-2\">\r\n        <div class=\"col-12 col-md-6\">\r\n            <periodo-select [(fInicio)]=\"fecha\" [(fFin)]=\"fechaFin\"></periodo-select>\r\n        </div>\r\n        <div class=\"col-12 col-md-6 text-center col-btn-refresh\">\r\n            <button class=\"btn btnl-lg btn-primary mt-1\" (click)=\"refresh(true)\">CARGAR</button>\r\n        </div>\r\n    </div>\r\n    <!-- <div class=\"card card-header\">\r\n        <div class=\"card-content\">\r\n            <div class=\"row header\">\r\n                <div class=\"colx colx-asiento\">#</div>\r\n                <div class=\"colx colx-fecha\">Fecha</div>\r\n                <div class=\"colx colx-referencia\">Referencia</div>\r\n                <div class=\"colx colx-tercero\">Tercero</div>\r\n                <div class=\"colx colx-cuentacontable\">Cuenta Contable</div>\r\n                <div class=\"colx colx-debito\">Débito</div>\r\n                <div class=\"colx colx-credito\">Crédito</div>\r\n            </div>\r\n        </div>\r\n    </div> -->\r\n    \r\n\r\n\r\n    <ng-template [ngIf]=\"loaded\">\r\n       \r\n        <div class=\"row mb-2 mt-4\">\r\n            <div class=\"col-12 col-md-4 col-lg-3\">\r\n                <fieldset class=\"form-group\" *ngIf=\"empresa.multipleMoneda == 1\">\r\n                    <label for=\"input-nombre\">Moneda</label>\r\n                    <sm-select [options]=\"selectTipoVistaOption\" [initValue]=\"initValueTipoVista\" (changeEvent)=\"tipoVistaChange($event)\"></sm-select>\r\n                </fieldset>\r\n            </div>\r\n            <div class=\"col-6 col-md-4 col-lg-3 text-right\">\r\n                <!-- <exportar-data></exportar-data> -->\r\n            </div>\r\n        </div>\r\n        \r\n\r\n        <div class=\"container-table\">\r\n            <table width=\"100%\" class=\"table table-transparent table-striped table-dark\">\r\n                <thead class=\"thead-dark\">\r\n                    <th width=\"5%\">#</th>\r\n                    <th width=\"5%\">Fecha</th>\r\n                    <th width=\"10%\">Referencia</th>\r\n                    <th width=\"10%\">Negocio</th>\r\n                    <th width=\"15%\">Tercero</th>\r\n                    <th width=\"25%\">Cuenta Contable</th>\r\n                    <th width=\"15%\">Debito</th>\r\n                    <th width=\"15%\">Credito</th>\r\n                </thead>\r\n                <tbody>\r\n                    <ng-template ngFor let-asiento [ngForOf]=\"asientos\">\r\n                        <tr class=\"row-space\">\r\n                            <td colspan=\"100\" class=\"row-space\">\r\n                                <i class=\"far fa-book-open text-primary\" style=\"text-align: middle; font-size:1.5rem;\"></i>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colspan=\"100\" class=\"row-space\">\r\n                                {{getField('operacion',asiento)}} - {{getField('numero-operacion',asiento)}}\r\n                            </td>\r\n                        </tr>\r\n                        <tr class=\"row-init\">\r\n                            <!-- número # -->\r\n                            <td [attr.rowspan]=\"getField('cantidadRegistros', asiento) + 1\">\r\n                                {{ asiento.id }}\r\n                            </td>\r\n                            <!-- FECHA -->\r\n                            <td [attr.rowspan]=\"getField('cantidadRegistros', asiento) + 1\">\r\n                                {{ asiento.fecha }}\r\n                            </td>\r\n                            <!-- referencia -->\r\n                            <td [attr.rowspan]=\"getField('cantidadRegistros', asiento) + 1\">\r\n                                {{ asiento.referencia }}\r\n                            </td>\r\n                            <td colspan=\"4\" class=\"td-space\"></td>\r\n                        </tr>\r\n                        <tr *ngFor=\"let reg of asiento.registros\">\r\n                            <td>\r\n                                {{ getFieldReg(\"negocio\",reg) }}\r\n                            </td>\r\n                            <td>\r\n                                {{ getFieldReg(\"entidad\", reg) }}\r\n                            </td>\r\n                            <td class=\"td-cuenta\">\r\n                                <cuenta-info [cuenta]=\"reg.cuenta\" [debe]=\"reg.debitoMonedaPrimaria > 0\" [tabCuenta]=\"true\"></cuenta-info>\r\n                                <!-- Si tiene una moneda que no es la primaria mostrar la multipricación -->\r\n                                <ng-template [ngIf]=\"reg.cuenta.moneda.id != monedaVista.id\">\r\n                                    <b>{{getMonedaAclaracion(reg)}}</b>\r\n                                </ng-template>\r\n                            </td>\r\n                            <td class=\"td-debito\">\r\n                                <!-- <p *ngIf=\"reg.debitoMonedaPrimaria > 0\">{{ functionService.formatMoney(reg.debitoMonedaPrimaria) }}</p> -->\r\n                                <money-input *ngIf=\"reg.debitoMonedaPrimaria > 0\" [value]=\"getTotalSegunMoneda(reg,true)\" [formatMoney]=\"true\" [monedaPrimary]=\"getMonedaSegunVista(reg)\"></money-input>\r\n                            </td>\r\n                            <td class=\"td-credito\">\r\n                                <!-- <p *ngIf=\"reg.creditoMonedaPrimaria > 0\">{{ functionService.formatMoney(reg.creditoMonedaPrimaria) }}</p> -->\r\n                                <money-input *ngIf=\"reg.creditoMonedaPrimaria > 0\" [value]=\"getTotalSegunMoneda(reg,false)\" [formatMoney]=\"true\" [monedaPrimary]=\"monedaVista\"></money-input>\r\n                            </td>\r\n                        </tr>\r\n                        <tr class=\"row-footer\">\r\n                            <td colspan=\"6\"></td>\r\n                            <td class=\"td-debito td-total\">\r\n                                <!-- <p>{{ functionService.formatMoney(asiento.debitoMonedaPrimaria) }}</p> -->\r\n                                <money-input [value]=\"getTotalSegunMoneda(asiento,true)\" [formatMoney]=\"true\" [monedaPrimary]=\"monedaVista\"></money-input>\r\n                            </td>\r\n                            <td class=\"td-credito td-total\">\r\n                                <!-- <p>{{ functionService.formatMoney(asiento.creditoMonedaPrimaria) }}</p> -->\r\n                                <money-input [value]=\"getTotalSegunMoneda(asiento,false)\" [formatMoney]=\"true\" [monedaPrimary]=\"monedaVista\"></money-input>\r\n                            </td>\r\n                        </tr>\r\n                        <tr class=\"row-space\"></tr>\r\n                    </ng-template>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <footer class=\"mt-2\" [paginate]=\"paginateData\" (setPageEvent)=\"SetPage($event)\"></footer>\r\n    </ng-template>\r\n\r\n    \r\n</section>\r\n"]}