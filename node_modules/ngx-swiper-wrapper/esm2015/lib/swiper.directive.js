import { __decorate, __param } from "tslib";
import Swiper from 'swiper';
import { PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { NgZone, Inject, Optional, ElementRef, Directive, AfterViewInit, OnDestroy, DoCheck, OnChanges, Input, Output, EventEmitter, SimpleChanges, KeyValueDiffer, KeyValueDiffers } from '@angular/core';
import { SWIPER_CONFIG, SwiperConfig, SwiperEvents } from './swiper.interfaces';
import * as ɵngcc0 from '@angular/core';
let SwiperDirective = class SwiperDirective {
    constructor(platformId, zone, elementRef, differs, defaults) {
        this.platformId = platformId;
        this.zone = zone;
        this.elementRef = elementRef;
        this.differs = differs;
        this.defaults = defaults;
        this.initialIndex = null;
        this.configDiff = null;
        this.disabled = false;
        this.performance = false;
        this.indexChange = new EventEmitter();
        this.S_INIT = new EventEmitter();
        this.S_BEFOREDESTROY = new EventEmitter();
        this.S_SCROLL = new EventEmitter();
        this.S_PROGRESS = new EventEmitter();
        this.S_KEYPRESS = new EventEmitter();
        this.S_RESIZE = new EventEmitter();
        this.S_BREAKPOINT = new EventEmitter();
        this.S_ZOOMCHANGE = new EventEmitter();
        this.S_AFTERRESIZE = new EventEmitter();
        this.S_BEFORERESIZE = new EventEmitter();
        this.S_LOOPFIX = new EventEmitter();
        this.S_BEFORELOOPFIX = new EventEmitter();
        this.S_SLIDERMOVE = new EventEmitter();
        this.S_SLIDECHANGE = new EventEmitter();
        this.S_SETTRANSLATE = new EventEmitter();
        this.S_SETTRANSITION = new EventEmitter();
        this.S_FROMEDGE = new EventEmitter();
        this.S_REACHEND = new EventEmitter();
        this.S_REACHBEGINNING = new EventEmitter();
        this.S_AUTOPLAY = new EventEmitter();
        this.S_AUTOPLAYSTART = new EventEmitter();
        this.S_AUTOPLAYSTOP = new EventEmitter();
        this.S_IMAGESREADY = new EventEmitter();
        this.S_LAZYIMAGELOAD = new EventEmitter();
        this.S_LAZYIMAGEREADY = new EventEmitter();
        this.S_SCROLLDRAGEND = new EventEmitter();
        this.S_SCROLLDRAGMOVE = new EventEmitter();
        this.S_SCROLLDRAGSTART = new EventEmitter();
        this.S_NAVIGATIONHIDE = new EventEmitter();
        this.S_NAVIGATIONSHOW = new EventEmitter();
        this.S_PAGINATIONRENDER = new EventEmitter();
        this.S_PAGINATIONUPDATE = new EventEmitter();
        this.S_PAGINATIONHIDE = new EventEmitter();
        this.S_PAGINATIONSHOW = new EventEmitter();
        this.S_TAP = new EventEmitter();
        this.S_CLICK = new EventEmitter();
        this.S_DOUBLETAP = new EventEmitter();
        this.S_TOUCHEND = new EventEmitter();
        this.S_TOUCHMOVE = new EventEmitter();
        this.S_TOUCHSTART = new EventEmitter();
        this.S_TOUCHMOVEOPPOSITE = new EventEmitter();
        this.S_TRANSITIONEND = new EventEmitter();
        this.S_TRANSITIONSTART = new EventEmitter();
        this.S_SLIDEPREVTRANSITIONEND = new EventEmitter();
        this.S_SLIDEPREVTRANSITIONSTART = new EventEmitter();
        this.S_SLIDENEXTTRANSITIONEND = new EventEmitter();
        this.S_SLIDENEXTTRANSITIONSTART = new EventEmitter();
        this.S_SLIDECHANGETRANSITIONEND = new EventEmitter();
        this.S_SLIDECHANGETRANSITIONSTART = new EventEmitter();
    }
    set index(index) {
        if (index != null) {
            this.setIndex(index);
        }
    }
    ngAfterViewInit() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        const params = new SwiperConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        if (params.scrollbar === true) {
            params.scrollbar = {
                el: '.swiper-scrollbar'
            };
        }
        if (params.pagination === true) {
            params.pagination = {
                el: '.swiper-pagination'
            };
        }
        if (params.navigation === true) {
            params.navigation = {
                prevEl: '.swiper-button-prev',
                nextEl: '.swiper-button-next'
            };
        }
        if (this.disabled) {
            params.allowSlidePrev = false;
            params.allowSlideNext = false;
        }
        if (this.initialIndex != null) {
            params.initialSlide = this.initialIndex;
            this.initialIndex = null;
        }
        params.on = {
            slideChange: () => {
                if (this.instance && this.indexChange.observers.length) {
                    this.emit(this.indexChange, this.instance.realIndex);
                }
            }
        };
        this.zone.runOutsideAngular(() => {
            this.instance = new Swiper(this.elementRef.nativeElement, params);
        });
        if (params.init !== false && this.S_INIT.observers.length) {
            this.emit(this.S_INIT, this.instance);
        }
        // Add native Swiper event handling
        SwiperEvents.forEach((eventName) => {
            let swiperEvent = eventName.replace('swiper', '');
            swiperEvent = swiperEvent.charAt(0).toLowerCase() + swiperEvent.slice(1);
            this.instance.on(swiperEvent, (...args) => {
                if (args.length === 1) {
                    args = args[0];
                }
                const output = `S_${swiperEvent.toUpperCase()}`;
                const emitter = this[output];
                if (emitter.observers.length) {
                    this.emit(emitter, args);
                }
            });
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    }
    ngOnDestroy() {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.destroy(true, this.instance.initialized || false);
            });
            this.instance = null;
        }
    }
    ngDoCheck() {
        if (this.configDiff) {
            const changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.initialIndex = this.getIndex(true);
                this.ngOnDestroy();
                this.ngAfterViewInit();
                this.update();
            }
        }
    }
    ngOnChanges(changes) {
        if (this.instance && changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                if (changes['disabled'].currentValue === true) {
                    this.zone.runOutsideAngular(() => {
                        this.ngOnDestroy();
                        this.ngAfterViewInit();
                    });
                }
                else if (changes['disabled'].currentValue === false) {
                    this.zone.runOutsideAngular(() => {
                        this.ngOnDestroy();
                        this.ngAfterViewInit();
                    });
                }
            }
        }
    }
    emit(emitter, value) {
        if (this.performance) {
            emitter.emit(value);
        }
        else {
            this.zone.run(() => emitter.emit(value));
        }
    }
    swiper() {
        return this.instance;
    }
    init() {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.init();
            });
        }
    }
    update() {
        setTimeout(() => {
            if (this.instance) {
                this.zone.runOutsideAngular(() => {
                    this.instance.update();
                });
            }
        }, 0);
    }
    getIndex(real) {
        if (!this.instance) {
            return this.initialIndex || 0;
        }
        else {
            return real ? this.instance.realIndex : this.instance.activeIndex;
        }
    }
    setIndex(index, speed, silent) {
        if (!this.instance) {
            this.initialIndex = index;
        }
        else {
            let realIndex = index * this.instance.params.slidesPerGroup;
            if (this.instance.params.loop) {
                realIndex += this.instance.loopedSlides;
            }
            this.zone.runOutsideAngular(() => {
                this.instance.slideTo(realIndex, speed, !silent);
            });
        }
    }
    prevSlide(speed, silent) {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.slidePrev(speed, !silent);
            });
        }
    }
    nextSlide(speed, silent) {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                this.instance.slideNext(speed, !silent);
            });
        }
    }
    stopAutoplay(reset) {
        if (reset) {
            this.setIndex(0);
        }
        if (this.instance && this.instance.autoplay) {
            this.zone.runOutsideAngular(() => {
                this.instance.autoplay.stop();
            });
        }
    }
    startAutoplay(reset) {
        if (reset) {
            this.setIndex(0);
        }
        if (this.instance && this.instance.autoplay) {
            this.zone.runOutsideAngular(() => {
                this.instance.autoplay.start();
            });
        }
    }
};
SwiperDirective.ɵfac = function SwiperDirective_Factory(t) { return new (t || SwiperDirective)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(SWIPER_CONFIG, 8)); };
SwiperDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SwiperDirective, selectors: [["", "swiper", ""]], inputs: { disabled: "disabled", performance: "performance", index: "index", config: ["swiper", "config"] }, outputs: { indexChange: "indexChange", S_INIT: "init", S_BEFOREDESTROY: "beforeDestroy", S_SCROLL: "scroll", S_PROGRESS: "progress", S_KEYPRESS: "keyPress", S_RESIZE: "resize", S_BREAKPOINT: "breakpoint", S_ZOOMCHANGE: "zoomChange", S_AFTERRESIZE: "afterResize", S_BEFORERESIZE: "beforeResize", S_LOOPFIX: "loopFix", S_BEFORELOOPFIX: "beforeLoopFix", S_SLIDERMOVE: "sliderMove", S_SLIDECHANGE: "slideChange", S_SETTRANSLATE: "setTranslate", S_SETTRANSITION: "setTransition", S_FROMEDGE: "fromEdge", S_REACHEND: "reachEnd", S_REACHBEGINNING: "reachBeginning", S_AUTOPLAY: "autoplay", S_AUTOPLAYSTART: "autoplayStart", S_AUTOPLAYSTOP: "autoplayStop", S_IMAGESREADY: "imagesReady", S_LAZYIMAGELOAD: "lazyImageLoad", S_LAZYIMAGEREADY: "lazyImageReady", S_SCROLLDRAGEND: "scrollDragEnd", S_SCROLLDRAGMOVE: "scrollDragMove", S_SCROLLDRAGSTART: "scrollDragStart", S_NAVIGATIONHIDE: "navigationHide", S_NAVIGATIONSHOW: "navigationShow", S_PAGINATIONRENDER: "paginationRender", S_PAGINATIONUPDATE: "paginationUpdate", S_PAGINATIONHIDE: "paginationHide", S_PAGINATIONSHOW: "paginationShow", S_TAP: "swiperTap", S_CLICK: "swiperClick", S_DOUBLETAP: "swiperDoubleTap", S_TOUCHEND: "swiperTouchEnd", S_TOUCHMOVE: "swiperTouchMove", S_TOUCHSTART: "swiperTouchStart", S_TOUCHMOVEOPPOSITE: "swiperTouchMoveOpposite", S_TRANSITIONEND: "swiperTransitionEnd", S_TRANSITIONSTART: "swiperTransitionStart", S_SLIDEPREVTRANSITIONEND: "slidePrevTransitionEnd", S_SLIDEPREVTRANSITIONSTART: "slidePrevTransitionStart", S_SLIDENEXTTRANSITIONEND: "slideNextTransitionEnd", S_SLIDENEXTTRANSITIONSTART: "slideNextTransitionStart", S_SLIDECHANGETRANSITIONEND: "slideChangeTransitionEnd", S_SLIDECHANGETRANSITIONSTART: "slideChangeTransitionStart" }, exportAs: ["ngxSwiper"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
SwiperDirective.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone },
    { type: ElementRef },
    { type: KeyValueDiffers },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SWIPER_CONFIG,] }] }
];
__decorate([
    Input()
], SwiperDirective.prototype, "index", null);
__decorate([
    Input()
], SwiperDirective.prototype, "disabled", void 0);
__decorate([
    Input()
], SwiperDirective.prototype, "performance", void 0);
__decorate([
    Input('swiper')
], SwiperDirective.prototype, "config", void 0);
__decorate([
    Output()
], SwiperDirective.prototype, "indexChange", void 0);
__decorate([
    Output('init')
], SwiperDirective.prototype, "S_INIT", void 0);
__decorate([
    Output('beforeDestroy')
], SwiperDirective.prototype, "S_BEFOREDESTROY", void 0);
__decorate([
    Output('scroll')
], SwiperDirective.prototype, "S_SCROLL", void 0);
__decorate([
    Output('progress')
], SwiperDirective.prototype, "S_PROGRESS", void 0);
__decorate([
    Output('keyPress')
], SwiperDirective.prototype, "S_KEYPRESS", void 0);
__decorate([
    Output('resize')
], SwiperDirective.prototype, "S_RESIZE", void 0);
__decorate([
    Output('breakpoint')
], SwiperDirective.prototype, "S_BREAKPOINT", void 0);
__decorate([
    Output('zoomChange')
], SwiperDirective.prototype, "S_ZOOMCHANGE", void 0);
__decorate([
    Output('afterResize')
], SwiperDirective.prototype, "S_AFTERRESIZE", void 0);
__decorate([
    Output('beforeResize')
], SwiperDirective.prototype, "S_BEFORERESIZE", void 0);
__decorate([
    Output('loopFix')
], SwiperDirective.prototype, "S_LOOPFIX", void 0);
__decorate([
    Output('beforeLoopFix')
], SwiperDirective.prototype, "S_BEFORELOOPFIX", void 0);
__decorate([
    Output('sliderMove')
], SwiperDirective.prototype, "S_SLIDERMOVE", void 0);
__decorate([
    Output('slideChange')
], SwiperDirective.prototype, "S_SLIDECHANGE", void 0);
__decorate([
    Output('setTranslate')
], SwiperDirective.prototype, "S_SETTRANSLATE", void 0);
__decorate([
    Output('setTransition')
], SwiperDirective.prototype, "S_SETTRANSITION", void 0);
__decorate([
    Output('fromEdge')
], SwiperDirective.prototype, "S_FROMEDGE", void 0);
__decorate([
    Output('reachEnd')
], SwiperDirective.prototype, "S_REACHEND", void 0);
__decorate([
    Output('reachBeginning')
], SwiperDirective.prototype, "S_REACHBEGINNING", void 0);
__decorate([
    Output('autoplay')
], SwiperDirective.prototype, "S_AUTOPLAY", void 0);
__decorate([
    Output('autoplayStart')
], SwiperDirective.prototype, "S_AUTOPLAYSTART", void 0);
__decorate([
    Output('autoplayStop')
], SwiperDirective.prototype, "S_AUTOPLAYSTOP", void 0);
__decorate([
    Output('imagesReady')
], SwiperDirective.prototype, "S_IMAGESREADY", void 0);
__decorate([
    Output('lazyImageLoad')
], SwiperDirective.prototype, "S_LAZYIMAGELOAD", void 0);
__decorate([
    Output('lazyImageReady')
], SwiperDirective.prototype, "S_LAZYIMAGEREADY", void 0);
__decorate([
    Output('scrollDragEnd')
], SwiperDirective.prototype, "S_SCROLLDRAGEND", void 0);
__decorate([
    Output('scrollDragMove')
], SwiperDirective.prototype, "S_SCROLLDRAGMOVE", void 0);
__decorate([
    Output('scrollDragStart')
], SwiperDirective.prototype, "S_SCROLLDRAGSTART", void 0);
__decorate([
    Output('navigationHide')
], SwiperDirective.prototype, "S_NAVIGATIONHIDE", void 0);
__decorate([
    Output('navigationShow')
], SwiperDirective.prototype, "S_NAVIGATIONSHOW", void 0);
__decorate([
    Output('paginationRender')
], SwiperDirective.prototype, "S_PAGINATIONRENDER", void 0);
__decorate([
    Output('paginationUpdate')
], SwiperDirective.prototype, "S_PAGINATIONUPDATE", void 0);
__decorate([
    Output('paginationHide')
], SwiperDirective.prototype, "S_PAGINATIONHIDE", void 0);
__decorate([
    Output('paginationShow')
], SwiperDirective.prototype, "S_PAGINATIONSHOW", void 0);
__decorate([
    Output('swiperTap')
], SwiperDirective.prototype, "S_TAP", void 0);
__decorate([
    Output('swiperClick')
], SwiperDirective.prototype, "S_CLICK", void 0);
__decorate([
    Output('swiperDoubleTap')
], SwiperDirective.prototype, "S_DOUBLETAP", void 0);
__decorate([
    Output('swiperTouchEnd')
], SwiperDirective.prototype, "S_TOUCHEND", void 0);
__decorate([
    Output('swiperTouchMove')
], SwiperDirective.prototype, "S_TOUCHMOVE", void 0);
__decorate([
    Output('swiperTouchStart')
], SwiperDirective.prototype, "S_TOUCHSTART", void 0);
__decorate([
    Output('swiperTouchMoveOpposite')
], SwiperDirective.prototype, "S_TOUCHMOVEOPPOSITE", void 0);
__decorate([
    Output('swiperTransitionEnd')
], SwiperDirective.prototype, "S_TRANSITIONEND", void 0);
__decorate([
    Output('swiperTransitionStart')
], SwiperDirective.prototype, "S_TRANSITIONSTART", void 0);
__decorate([
    Output('slidePrevTransitionEnd')
], SwiperDirective.prototype, "S_SLIDEPREVTRANSITIONEND", void 0);
__decorate([
    Output('slidePrevTransitionStart')
], SwiperDirective.prototype, "S_SLIDEPREVTRANSITIONSTART", void 0);
__decorate([
    Output('slideNextTransitionEnd')
], SwiperDirective.prototype, "S_SLIDENEXTTRANSITIONEND", void 0);
__decorate([
    Output('slideNextTransitionStart')
], SwiperDirective.prototype, "S_SLIDENEXTTRANSITIONSTART", void 0);
__decorate([
    Output('slideChangeTransitionEnd')
], SwiperDirective.prototype, "S_SLIDECHANGETRANSITIONEND", void 0);
__decorate([
    Output('slideChangeTransitionStart')
], SwiperDirective.prototype, "S_SLIDECHANGETRANSITIONSTART", void 0);
SwiperDirective = __decorate([ __param(0, Inject(PLATFORM_ID)),
    __param(4, Optional()), __param(4, Inject(SWIPER_CONFIG))
], SwiperDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SwiperDirective, [{
        type: Directive,
        args: [{
                selector: '[swiper]',
                exportAs: 'ngxSwiper'
            }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: NgZone }, { type: ElementRef }, { type: KeyValueDiffers }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [SWIPER_CONFIG]
            }] }]; }, { disabled: [{
            type: Input
        }], performance: [{
            type: Input
        }], indexChange: [{
            type: Output
        }], S_INIT: [{
            type: Output,
            args: ['init']
        }], S_BEFOREDESTROY: [{
            type: Output,
            args: ['beforeDestroy']
        }], S_SCROLL: [{
            type: Output,
            args: ['scroll']
        }], S_PROGRESS: [{
            type: Output,
            args: ['progress']
        }], S_KEYPRESS: [{
            type: Output,
            args: ['keyPress']
        }], S_RESIZE: [{
            type: Output,
            args: ['resize']
        }], S_BREAKPOINT: [{
            type: Output,
            args: ['breakpoint']
        }], S_ZOOMCHANGE: [{
            type: Output,
            args: ['zoomChange']
        }], S_AFTERRESIZE: [{
            type: Output,
            args: ['afterResize']
        }], S_BEFORERESIZE: [{
            type: Output,
            args: ['beforeResize']
        }], S_LOOPFIX: [{
            type: Output,
            args: ['loopFix']
        }], S_BEFORELOOPFIX: [{
            type: Output,
            args: ['beforeLoopFix']
        }], S_SLIDERMOVE: [{
            type: Output,
            args: ['sliderMove']
        }], S_SLIDECHANGE: [{
            type: Output,
            args: ['slideChange']
        }], S_SETTRANSLATE: [{
            type: Output,
            args: ['setTranslate']
        }], S_SETTRANSITION: [{
            type: Output,
            args: ['setTransition']
        }], S_FROMEDGE: [{
            type: Output,
            args: ['fromEdge']
        }], S_REACHEND: [{
            type: Output,
            args: ['reachEnd']
        }], S_REACHBEGINNING: [{
            type: Output,
            args: ['reachBeginning']
        }], S_AUTOPLAY: [{
            type: Output,
            args: ['autoplay']
        }], S_AUTOPLAYSTART: [{
            type: Output,
            args: ['autoplayStart']
        }], S_AUTOPLAYSTOP: [{
            type: Output,
            args: ['autoplayStop']
        }], S_IMAGESREADY: [{
            type: Output,
            args: ['imagesReady']
        }], S_LAZYIMAGELOAD: [{
            type: Output,
            args: ['lazyImageLoad']
        }], S_LAZYIMAGEREADY: [{
            type: Output,
            args: ['lazyImageReady']
        }], S_SCROLLDRAGEND: [{
            type: Output,
            args: ['scrollDragEnd']
        }], S_SCROLLDRAGMOVE: [{
            type: Output,
            args: ['scrollDragMove']
        }], S_SCROLLDRAGSTART: [{
            type: Output,
            args: ['scrollDragStart']
        }], S_NAVIGATIONHIDE: [{
            type: Output,
            args: ['navigationHide']
        }], S_NAVIGATIONSHOW: [{
            type: Output,
            args: ['navigationShow']
        }], S_PAGINATIONRENDER: [{
            type: Output,
            args: ['paginationRender']
        }], S_PAGINATIONUPDATE: [{
            type: Output,
            args: ['paginationUpdate']
        }], S_PAGINATIONHIDE: [{
            type: Output,
            args: ['paginationHide']
        }], S_PAGINATIONSHOW: [{
            type: Output,
            args: ['paginationShow']
        }], S_TAP: [{
            type: Output,
            args: ['swiperTap']
        }], S_CLICK: [{
            type: Output,
            args: ['swiperClick']
        }], S_DOUBLETAP: [{
            type: Output,
            args: ['swiperDoubleTap']
        }], S_TOUCHEND: [{
            type: Output,
            args: ['swiperTouchEnd']
        }], S_TOUCHMOVE: [{
            type: Output,
            args: ['swiperTouchMove']
        }], S_TOUCHSTART: [{
            type: Output,
            args: ['swiperTouchStart']
        }], S_TOUCHMOVEOPPOSITE: [{
            type: Output,
            args: ['swiperTouchMoveOpposite']
        }], S_TRANSITIONEND: [{
            type: Output,
            args: ['swiperTransitionEnd']
        }], S_TRANSITIONSTART: [{
            type: Output,
            args: ['swiperTransitionStart']
        }], S_SLIDEPREVTRANSITIONEND: [{
            type: Output,
            args: ['slidePrevTransitionEnd']
        }], S_SLIDEPREVTRANSITIONSTART: [{
            type: Output,
            args: ['slidePrevTransitionStart']
        }], S_SLIDENEXTTRANSITIONEND: [{
            type: Output,
            args: ['slideNextTransitionEnd']
        }], S_SLIDENEXTTRANSITIONSTART: [{
            type: Output,
            args: ['slideNextTransitionStart']
        }], S_SLIDECHANGETRANSITIONEND: [{
            type: Output,
            args: ['slideChangeTransitionEnd']
        }], S_SLIDECHANGETRANSITIONSTART: [{
            type: Output,
            args: ['slideChangeTransitionStart']
        }], index: [{
            type: Input
        }], config: [{
            type: Input,
            args: ['swiper']
        }] }); })();
export { SwiperDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,