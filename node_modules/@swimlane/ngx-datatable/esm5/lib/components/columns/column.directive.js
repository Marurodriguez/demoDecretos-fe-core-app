import { __decorate } from "tslib";
import { Directive, TemplateRef, ContentChild, Input } from '@angular/core';
import { DataTableColumnHeaderDirective } from './column-header.directive';
import { DataTableColumnCellDirective } from './column-cell.directive';
import { DataTableColumnCellTreeToggle } from './tree.directive';
import { ColumnChangesService } from '../../services/column-changes.service';
import * as ɵngcc0 from '@angular/core';
var DataTableColumnDirective = /** @class */ (function () {
    function DataTableColumnDirective(columnChangesService) {
        this.columnChangesService = columnChangesService;
        this.isFirstChange = true;
    }
    Object.defineProperty(DataTableColumnDirective.prototype, "cellTemplate", {
        get: function () {
            return this._cellTemplateInput || this._cellTemplateQuery;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableColumnDirective.prototype, "headerTemplate", {
        get: function () {
            return this._headerTemplateInput || this._headerTemplateQuery;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableColumnDirective.prototype, "treeToggleTemplate", {
        get: function () {
            return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;
        },
        enumerable: true,
        configurable: true
    });
    DataTableColumnDirective.prototype.ngOnChanges = function () {
        if (this.isFirstChange) {
            this.isFirstChange = false;
        }
        else {
            this.columnChangesService.onInputChange();
        }
    };
    DataTableColumnDirective.ctorParameters = function () { return [
        { type: ColumnChangesService }
    ]; };
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "name", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "prop", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "frozenLeft", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "frozenRight", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "flexGrow", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "resizeable", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "comparator", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "pipe", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "sortable", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "draggable", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "canAutoResize", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "minWidth", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "width", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "maxWidth", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "checkboxable", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "headerCheckboxable", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "headerClass", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "cellClass", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "isTreeColumn", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "treeLevelIndent", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "summaryFunc", void 0);
    __decorate([
        Input()
    ], DataTableColumnDirective.prototype, "summaryTemplate", void 0);
    __decorate([
        Input('cellTemplate')
    ], DataTableColumnDirective.prototype, "_cellTemplateInput", void 0);
    __decorate([
        ContentChild(DataTableColumnCellDirective, { read: TemplateRef, static: true })
    ], DataTableColumnDirective.prototype, "_cellTemplateQuery", void 0);
    __decorate([
        Input('headerTemplate')
    ], DataTableColumnDirective.prototype, "_headerTemplateInput", void 0);
    __decorate([
        ContentChild(DataTableColumnHeaderDirective, { read: TemplateRef, static: true })
    ], DataTableColumnDirective.prototype, "_headerTemplateQuery", void 0);
    __decorate([
        Input('treeToggleTemplate')
    ], DataTableColumnDirective.prototype, "_treeToggleTemplateInput", void 0);
    __decorate([
        ContentChild(DataTableColumnCellTreeToggle, { read: TemplateRef, static: true })
    ], DataTableColumnDirective.prototype, "_treeToggleTemplateQuery", void 0);
DataTableColumnDirective.ɵfac = function DataTableColumnDirective_Factory(t) { return new (t || DataTableColumnDirective)(ɵngcc0.ɵɵdirectiveInject(ColumnChangesService)); };
DataTableColumnDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataTableColumnDirective, selectors: [["ngx-datatable-column"]], contentQueries: function DataTableColumnDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DataTableColumnCellDirective, true, TemplateRef);
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DataTableColumnHeaderDirective, true, TemplateRef);
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DataTableColumnCellTreeToggle, true, TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._cellTemplateQuery = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerTemplateQuery = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._treeToggleTemplateQuery = _t.first);
    } }, inputs: { name: "name", prop: "prop", frozenLeft: "frozenLeft", frozenRight: "frozenRight", flexGrow: "flexGrow", resizeable: "resizeable", comparator: "comparator", pipe: "pipe", sortable: "sortable", draggable: "draggable", canAutoResize: "canAutoResize", minWidth: "minWidth", width: "width", maxWidth: "maxWidth", checkboxable: "checkboxable", headerCheckboxable: "headerCheckboxable", headerClass: "headerClass", cellClass: "cellClass", isTreeColumn: "isTreeColumn", treeLevelIndent: "treeLevelIndent", summaryFunc: "summaryFunc", summaryTemplate: "summaryTemplate", _cellTemplateInput: ["cellTemplate", "_cellTemplateInput"], _headerTemplateInput: ["headerTemplate", "_headerTemplateInput"], _treeToggleTemplateInput: ["treeToggleTemplate", "_treeToggleTemplateInput"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableColumnDirective, [{
        type: Directive,
        args: [{ selector: 'ngx-datatable-column' }]
    }], function () { return [{ type: ColumnChangesService }]; }, { name: [{
            type: Input
        }], prop: [{
            type: Input
        }], frozenLeft: [{
            type: Input
        }], frozenRight: [{
            type: Input
        }], flexGrow: [{
            type: Input
        }], resizeable: [{
            type: Input
        }], comparator: [{
            type: Input
        }], pipe: [{
            type: Input
        }], sortable: [{
            type: Input
        }], draggable: [{
            type: Input
        }], canAutoResize: [{
            type: Input
        }], minWidth: [{
            type: Input
        }], width: [{
            type: Input
        }], maxWidth: [{
            type: Input
        }], checkboxable: [{
            type: Input
        }], headerCheckboxable: [{
            type: Input
        }], headerClass: [{
            type: Input
        }], cellClass: [{
            type: Input
        }], isTreeColumn: [{
            type: Input
        }], treeLevelIndent: [{
            type: Input
        }], summaryFunc: [{
            type: Input
        }], summaryTemplate: [{
            type: Input
        }], _cellTemplateInput: [{
            type: Input,
            args: ['cellTemplate']
        }], _cellTemplateQuery: [{
            type: ContentChild,
            args: [DataTableColumnCellDirective, { read: TemplateRef, static: true }]
        }], _headerTemplateInput: [{
            type: Input,
            args: ['headerTemplate']
        }], _headerTemplateQuery: [{
            type: ContentChild,
            args: [DataTableColumnHeaderDirective, { read: TemplateRef, static: true }]
        }], _treeToggleTemplateInput: [{
            type: Input,
            args: ['treeToggleTemplate']
        }], _treeToggleTemplateQuery: [{
            type: ContentChild,
            args: [DataTableColumnCellTreeToggle, { read: TemplateRef, static: true }]
        }] }); })();
    return DataTableColumnDirective;
}());
export { DataTableColumnDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiQHN3aW1sYW5lL25neC1kYXRhdGFibGUvbGliL2NvbXBvbmVudHMvY29sdW1ucy9jb2x1bW4uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUN0RyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQzs7QUFJN0U7QUFBNEQsSUF3RDFELGtDQUFvQixvQkFBMEM7QUFBSSxRQUE5Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO0FBQUMsUUFGdkQsa0JBQWEsR0FBRyxJQUFJLENBQUM7QUFDL0IsSUFDbUUsQ0FBQztBQUNwRSxJQTNCRSxzQkFBSSxrREFBWTtBQUFJLGFBQXBCO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUM7QUFDOUQsUUFBRSxDQUFDO0FBRUg7QUFBMEI7QUFDQSxPQUh2QjtBQUNILElBT0Usc0JBQUksb0RBQWM7QUFBSSxhQUF0QjtBQUFjLFlBQ1osT0FBTyxJQUFJLENBQUMsb0JBQW9CLElBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDO0FBQ2xFLFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQ0osT0FIbkI7QUFDSCxJQU9FLHNCQUFJLHdEQUFrQjtBQUFJLGFBQTFCO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyx3QkFBd0IsSUFBSSxJQUFJLENBQUMsd0JBQXdCLENBQUM7QUFDMUUsUUFBRSxDQUFDO0FBRUg7QUFBMEI7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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELCtCQUFDO0FBQ0EsQ0FEQSxBQWpFRCxJQWlFQztBQUNELFNBbEVhLHdCQUF3QjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiwgQ29udGVudENoaWxkLCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRhVGFibGVDb2x1bW5IZWFkZXJEaXJlY3RpdmUgfSBmcm9tICcuL2NvbHVtbi1oZWFkZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IERhdGFUYWJsZUNvbHVtbkNlbGxEaXJlY3RpdmUgfSBmcm9tICcuL2NvbHVtbi1jZWxsLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEYXRhVGFibGVDb2x1bW5DZWxsVHJlZVRvZ2dsZSB9IGZyb20gJy4vdHJlZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQ29sdW1uQ2hhbmdlc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jb2x1bW4tY2hhbmdlcy5zZXJ2aWNlJztcbmltcG9ydCB7IFRhYmxlQ29sdW1uUHJvcCB9IGZyb20gJy4uLy4uL3R5cGVzL3RhYmxlLWNvbHVtbi50eXBlJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnbmd4LWRhdGF0YWJsZS1jb2x1bW4nIH0pXG5leHBvcnQgY2xhc3MgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgbmFtZTogc3RyaW5nO1xuICBASW5wdXQoKSBwcm9wOiBUYWJsZUNvbHVtblByb3A7XG4gIEBJbnB1dCgpIGZyb3plbkxlZnQ6IGFueTtcbiAgQElucHV0KCkgZnJvemVuUmlnaHQ6IGFueTtcbiAgQElucHV0KCkgZmxleEdyb3c6IG51bWJlcjtcbiAgQElucHV0KCkgcmVzaXplYWJsZTogYm9vbGVhbjtcbiAgQElucHV0KCkgY29tcGFyYXRvcjogYW55O1xuICBASW5wdXQoKSBwaXBlOiBhbnk7XG4gIEBJbnB1dCgpIHNvcnRhYmxlOiBib29sZWFuO1xuICBASW5wdXQoKSBkcmFnZ2FibGU6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGNhbkF1dG9SZXNpemU6IGJvb2xlYW47XG4gIEBJbnB1dCgpIG1pbldpZHRoOiBudW1iZXI7XG4gIEBJbnB1dCgpIHdpZHRoOiBudW1iZXI7XG4gIEBJbnB1dCgpIG1heFdpZHRoOiBudW1iZXI7XG4gIEBJbnB1dCgpIGNoZWNrYm94YWJsZTogYm9vbGVhbjtcbiAgQElucHV0KCkgaGVhZGVyQ2hlY2tib3hhYmxlOiBib29sZWFuO1xuICBASW5wdXQoKSBoZWFkZXJDbGFzczogc3RyaW5nIHwgKChkYXRhOiBhbnkpID0+IHN0cmluZyB8IGFueSk7XG4gIEBJbnB1dCgpIGNlbGxDbGFzczogc3RyaW5nIHwgKChkYXRhOiBhbnkpID0+IHN0cmluZyB8IGFueSk7XG4gIEBJbnB1dCgpIGlzVHJlZUNvbHVtbjogYm9vbGVhbjtcbiAgQElucHV0KCkgdHJlZUxldmVsSW5kZW50OiBudW1iZXI7XG4gIEBJbnB1dCgpIHN1bW1hcnlGdW5jOiAoY2VsbHM6IGFueVtdKSA9PiBhbnk7XG4gIEBJbnB1dCgpIHN1bW1hcnlUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICBASW5wdXQoJ2NlbGxUZW1wbGF0ZScpXG4gIF9jZWxsVGVtcGxhdGVJbnB1dDogVGVtcGxhdGVSZWY8YW55PjtcblxuICBAQ29udGVudENoaWxkKERhdGFUYWJsZUNvbHVtbkNlbGxEaXJlY3RpdmUsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KVxuICBfY2VsbFRlbXBsYXRlUXVlcnk6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgZ2V0IGNlbGxUZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fY2VsbFRlbXBsYXRlSW5wdXQgfHwgdGhpcy5fY2VsbFRlbXBsYXRlUXVlcnk7XG4gIH1cblxuICBASW5wdXQoJ2hlYWRlclRlbXBsYXRlJylcbiAgX2hlYWRlclRlbXBsYXRlSW5wdXQ6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgQENvbnRlbnRDaGlsZChEYXRhVGFibGVDb2x1bW5IZWFkZXJEaXJlY3RpdmUsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KVxuICBfaGVhZGVyVGVtcGxhdGVRdWVyeTogVGVtcGxhdGVSZWY8YW55PjtcblxuICBnZXQgaGVhZGVyVGVtcGxhdGUoKTogVGVtcGxhdGVSZWY8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX2hlYWRlclRlbXBsYXRlSW5wdXQgfHwgdGhpcy5faGVhZGVyVGVtcGxhdGVRdWVyeTtcbiAgfVxuXG4gIEBJbnB1dCgndHJlZVRvZ2dsZVRlbXBsYXRlJylcbiAgX3RyZWVUb2dnbGVUZW1wbGF0ZUlucHV0OiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBDb250ZW50Q2hpbGQoRGF0YVRhYmxlQ29sdW1uQ2VsbFRyZWVUb2dnbGUsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KVxuICBfdHJlZVRvZ2dsZVRlbXBsYXRlUXVlcnk6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgZ2V0IHRyZWVUb2dnbGVUZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fdHJlZVRvZ2dsZVRlbXBsYXRlSW5wdXQgfHwgdGhpcy5fdHJlZVRvZ2dsZVRlbXBsYXRlUXVlcnk7XG4gIH1cblxuICBwcml2YXRlIGlzRmlyc3RDaGFuZ2UgPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29sdW1uQ2hhbmdlc1NlcnZpY2U6IENvbHVtbkNoYW5nZXNTZXJ2aWNlKSB7fVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGlmICh0aGlzLmlzRmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMuaXNGaXJzdENoYW5nZSA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbHVtbkNoYW5nZXNTZXJ2aWNlLm9uSW5wdXRDaGFuZ2UoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==