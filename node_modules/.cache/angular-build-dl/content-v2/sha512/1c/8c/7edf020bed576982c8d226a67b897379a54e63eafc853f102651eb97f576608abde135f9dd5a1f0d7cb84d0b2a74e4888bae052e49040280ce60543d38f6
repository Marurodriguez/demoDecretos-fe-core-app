{"version":3,"sources":["webpack:///coreApp/src/app/pages/content-pages/error/error-page.component.ts","webpack:///coreApp/src/app/pages/content-pages/error/error-page.component.html","webpack:///src/app/navigation/pages/content-pages/content-pages.module.ts","webpack:///src/app/navigation/pages/content-pages/content-pages-routing.module.ts","webpack:///coreApp/src/app/pages/content-pages/login/login-page.component.ts","webpack:///coreApp/src/app/pages/content-pages/login/login-page.component.html"],"names":["ErrorPageComponent","selector","templateUrl","styleUrls","ContentPagesModule","imports","declarations","routes","path","children","component","data","title","ContentPagesRoutingModule","forChild","exports","LoginPageComponent","router","authService","spinner","route","configService","loginFormSubmitted","isLoginFailed","mensaje","errorCode","loginForm","username","required","password","rememberMe","proyectConfig","loginAutoLogin","controls","setValue","loginUserName","loginPassWord","onSubmit","invalid","show","undefined","type","size","bdColor","color","fullScreen","signinUser","value","user","status","hide","navigate","alert"],"mappings":"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","file":"pages-content-pages-content-pages-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-error-page',\n    templateUrl: './error-page.component.html',\n    styleUrls: ['./error-page.component.scss']\n})\n\nexport class ErrorPageComponent {\n\n}","<!--Error page starts-->\n<section id=\"error\">\n  <div class=\"container-fluid\">\n    <div class=\"row auth-height full-height-vh\">\n      <div class=\"col-12 d-flex align-items-center justify-content-center\">\n        <div class=\"row\">\n          <div class=\"col-12 text-center\">\n            <img src=\"assets/img/gallery/error.png\" alt=\"\" class=\"img-fluid error-img mt-2\" height=\"300\" width=\"400\">\n            <h1 class=\"mt-4\">404 - Page Not Found!</h1>\n            <div class=\"w-75 error-text mx-auto mt-4\">\n              <p>The page you are looking for might have beel removed, had it's name changed, or is temporarily unavailable.</p>\n            </div>\n            <a [routerLink]=\"['/']\" class=\"btn btn-warning my-2\">Back To Home</a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n<!--Error page ends-->\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgxSpinnerModule } from 'ngx-spinner';\n\nimport { ContentPagesRoutingModule } from \"./content-pages-routing.module\";\nimport { ErrorPageComponent } from \"../../../../../../coreApp/src/app/pages/content-pages/error/error-page.component\";\nimport { LoginPageComponent } from \"../../../../../../coreApp/src/app/pages/content-pages/login/login-page.component\";\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ContentPagesRoutingModule,\n        FormsModule ,\n        ReactiveFormsModule,\n        NgbModule,\n        NgxSpinnerModule\n    ],\n    declarations: [\n        ErrorPageComponent,\n        LoginPageComponent\n    ]\n})\nexport class ContentPagesModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ErrorPageComponent } from \"../../../../../../coreApp/src/app/pages/content-pages/error/error-page.component\";\nimport { LoginPageComponent } from \"../../../../../../coreApp/src/app/pages/content-pages/login/login-page.component\";\n\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      {\n        path: 'error',\n        component: ErrorPageComponent,\n        data: {\n          title: 'Error Page'\n        }\n      },\n      {\n        path: 'login',\n        component: LoginPageComponent,\n        data: {\n          title: 'Login Page'\n        }\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ContentPagesRoutingModule { }\n","import { UserModel } from './../../../models/user.model';\nimport { ConfigService } from '../../../shared/services/config.service';\nimport { Component, ViewChild, OnInit, AfterViewChecked, AfterViewInit } from '@angular/core';\nimport { NgForm, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { AuthService } from '../../../shared/auth/auth.service';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { config } from 'process';\n\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss']\n})\n\nexport class LoginPageComponent implements OnInit, AfterViewInit {\n\n  loginFormSubmitted = false;\n  isLoginFailed = false;\n  mensaje: string = \"\";\n  errorCode: number = 0;\n\n  loginForm = new FormGroup({\n    username: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required]),\n    rememberMe: new FormControl(true)\n  });\n\n\n  constructor(private router: Router, private authService: AuthService,\n    private spinner: NgxSpinnerService,\n    private route: ActivatedRoute, public configService: ConfigService) {\n\n\n  }\n  ngOnInit(): void {\n    //Called after the constructor, initializing input properties, and the first call to ngOnChanges.\n    //Add 'implements OnInit' to the class.\n    if (this.configService.proyectConfig.loginAutoLogin == true) {\n      this.loginForm.controls.username.setValue(this.configService.proyectConfig.loginUserName);\n      this.loginForm.controls.password.setValue(this.configService.proyectConfig.loginPassWord);\n    }\n  }\n  ngAfterViewInit(): void {\n    //Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.\n    //Add 'implements AfterViewInit' to the class.\n    if (this.configService.proyectConfig.loginAutoLogin == true) {\n      this.onSubmit();\n    }\n  }\n  get lf() {\n    return this.loginForm.controls;\n  }\n\n  // On submit button click\n  onSubmit() {\n    this.loginFormSubmitted = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.spinner.show(undefined,\n      {\n        type: 'ball-triangle-path',\n        size: 'medium',\n        bdColor: 'rgba(0, 0, 0, 0.8)',\n        color: '#fff',\n        fullScreen: true\n      });\n    this.isLoginFailed = false;\n    this.mensaje = \"\";\n    this.errorCode = 0;\n    this.authService.signinUser(this.loginForm.value.username, this.loginForm.value.password, this);\n    /*this.authService.signinUser(this.loginForm.value.username, this.loginForm.value.password)\n      .then((res) => {\n        this.spinner.hide();\n        this.router.navigate(['/page']);\n      })\n      .catch((err) => {\n        this.isLoginFailed = true;\n        this.spinner.hide();\n        console.log('error: ' + err)\n      }\n      );*/\n  }\n  /**\n   *\n   * @param user recibe el usuario logineado y si dio error recibe solo con el usuario\n   * @param status status = 1 -> Login Ok, status = -1 usuario y contraseña incorrecto, status = -2 Fallo del servidor\n   */\n  responseLogin(user: UserModel, status: number) {\n    this.spinner.hide();\n    this.mensaje = \"\";\n\n    switch (status) {\n      case 1: //login Ok\n        //alert(\"login ok\");\n        this.isLoginFailed = false;\n        this.router.navigate(['']);\n        break;\n      case -1: //usuario o contraseña incorrectos\n        this.errorCode = status;\n        this.mensaje = \"El usuario o contraseña son incorrectos\";\n        alert(this.mensaje);\n        // this.isLoginFailed = true;\n        break;\n      default: //fallo del servidor (-2 u otros)\n        this.errorCode = status;\n        this.mensaje = \"Fallo al conectarse con el servidor\";\n        alert(this.mensaje);\n        // this.isLoginFailed = true;\n        break;\n    }\n  }\n}\n","<!--Login Page Starts-->\n<section id=\"login\">\n    <div class=\"row auth-height full-height-vh m-0\">\n        <div class=\"col-12 d-flex align-items-center justify-content-center\">\n            <div class=\"card overflow-hidden\">\n                <div class=\"card-content\">\n                    <div class=\"card-body auth-img\">\n                        <div class=\"row m-0\">\n                            <div class=\"col-lg-6 d-none d-lg-flex justify-content-center align-items-center auth-img-bg p-3\">\n                                <img src=\"{{configService.proyectConfig?.loginImg}}\" alt=\"\" class=\"img-fluid\" width=\"300\" height=\"230\">\n                            </div>\n                            <div class=\"col-lg-6 col-12 px-4 py-3\">\n                                <h4 class=\"mb-2 card-title\">{{configService.proyectConfig?.loginTitle}}</h4>\n                                <p>{{configService.proyectConfig?.loginDesc}}</p>\n                                <form [formGroup]=\"loginForm\">\n                                    <div class=\"form-group\">\n                                        <input type=\"text\" formControlName=\"username\" class=\"form-control\" placeholder=\"Usuario\" [ngClass]=\"{ 'is-invalid': loginFormSubmitted && lf.username.invalid, 'is-valid': loginFormSubmitted && !lf.username.invalid }\" required>\n                                        <div *ngIf=\"loginFormSubmitted && (lf.username.invalid || lf.username.errors?.required)\" class=\"help-block mt-1 text-danger\"> <i class=\"ft-alert-circle align-middle\"></i> Es Requerido</div>\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <input (keyup.enter)=\"onSubmit()\" type=\"password\" formControlName=\"password\" class=\"form-control\" placeholder=\"Password\" [ngClass]=\"{ 'is-invalid': loginFormSubmitted && lf.password.invalid, 'is-valid': loginFormSubmitted && !lf.password.invalid }\" required>\n                                        <div *ngIf=\"loginFormSubmitted && (lf.password.invalid || lf.password.errors?.required)\" class=\"help-block mt-1 text-danger\"> <i class=\"ft-alert-circle align-middle\"></i> Es Requerido\n                                        </div>\n                                    </div>\n                                    <div class=\"d-sm-flex justify-content-between mb-3 font-small-2\">\n                                        <div class=\"remember-me mb-2 mb-sm-0\">\n                                            <div class=\"checkbox auth-checkbox\" *ngIf=\"configService.proyectConfig?.loginRemember\">\n                                                <input type=\"checkbox\" formControlName=\"rememberMe\" class=\"form-control\" id=\"rememberMe\">\n                                                <label for=\"rememberMe\"><span class=\"font-small-2 mb-3 font-weight-normal\">Recuerdame</span></label>\n                                            </div>\n                                        </div>\n                                        <a href=\"javascript:;\" *ngIf=\"configService.proyectConfig?.loginAllowForgotPassword\">Olvidaste la clave</a>\n                                    </div>\n                                    <div class=\"d-flex justify-content-between flex-sm-row flex-column\">\n                                        <a href=\"javascript:;\" class=\"btn bg-light-primary mb-2 mb-sm-0\" *ngIf=\"configService.proyectConfig?.loginAllowRegister\">Register</a>\n                                        <a class=\"btn btn-primary\" (click)=\"onSubmit()\">Login</a>\n                                    </div>\n                                </form>\n                                <hr>\n\n                                <!-- <p class=\"text-danger\">{{getMensaje()}}</p> -->\n\n\n\n                                <div class=\"d-flex justify-content-between align-items-center\" *ngIf=\"configService.proyectConfig?.loginOrLoginWith\">\n                                    <h6 class=\"text-primary m-0\">Or Login With</h6>\n                                    <ngx-spinner></ngx-spinner>\n                                    <div class=\"login-options\">\n                                        <a class=\"btn btn-sm btn-social-icon btn-facebook mr-1\"><span class=\"fa fa-facebook\"></span></a>\n                                        <a class=\"btn btn-sm btn-social-icon btn-twitter mr-1\"><span class=\"fa fa-twitter\"></span></a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n<!--Login Page Ends-->"]}