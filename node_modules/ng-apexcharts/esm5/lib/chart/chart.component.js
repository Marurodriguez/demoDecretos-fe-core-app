/**
 * @fileoverview added by tsickle
 * Generated from: lib/chart/chart.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, ViewChild } from "@angular/core";
import { asapScheduler } from "rxjs";
import { default as ApexCharts } from "apexcharts";
import * as Éµngcc0 from '@angular/core';

var _c0 = ["chart"];
var ChartComponent = /** @class */ (function () {
    function ChartComponent() {
        this.autoUpdateSeries = true;
    }
    /**
     * @return {?}
     */
    ChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        asapScheduler.schedule((/**
         * @return {?}
         */
        function () {
            _this.createElement();
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ChartComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        asapScheduler.schedule((/**
         * @return {?}
         */
        function () {
            if (_this.autoUpdateSeries &&
                Object.keys(changes).filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c !== "series"; })).length === 0) {
                _this.updateSeries(_this.series, true);
                return;
            }
            _this.createElement();
        }));
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.chartObj) {
            this.chartObj.destroy();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ChartComponent.prototype.createElement = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var options = {};
        if (this.annotations) {
            options.annotations = this.annotations;
        }
        if (this.chart) {
            options.chart = this.chart;
        }
        if (this.colors) {
            options.colors = this.colors;
        }
        if (this.dataLabels) {
            options.dataLabels = this.dataLabels;
        }
        if (this.series) {
            options.series = this.series;
        }
        if (this.stroke) {
            options.stroke = this.stroke;
        }
        if (this.labels) {
            options.labels = this.labels;
        }
        if (this.legend) {
            options.legend = this.legend;
        }
        if (this.fill) {
            options.fill = this.fill;
        }
        if (this.tooltip) {
            options.tooltip = this.tooltip;
        }
        if (this.plotOptions) {
            options.plotOptions = this.plotOptions;
        }
        if (this.responsive) {
            options.responsive = this.responsive;
        }
        if (this.markers) {
            options.markers = this.markers;
        }
        if (this.noData) {
            options.noData = this.noData;
        }
        if (this.xaxis) {
            options.xaxis = this.xaxis;
        }
        if (this.yaxis) {
            options.yaxis = this.yaxis;
        }
        if (this.grid) {
            options.grid = this.grid;
        }
        if (this.states) {
            options.states = this.states;
        }
        if (this.title) {
            options.title = this.title;
        }
        if (this.subtitle) {
            options.subtitle = this.subtitle;
        }
        if (this.theme) {
            options.theme = this.theme;
        }
        if (this.chartObj) {
            this.chartObj.destroy();
        }
        this.chartObj = new ApexCharts(this.chartElement.nativeElement, options);
        this.render();
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.render = /**
     * @return {?}
     */
    function () {
        return this.chartObj.render();
    };
    /**
     * @param {?} options
     * @param {?=} redrawPaths
     * @param {?=} animate
     * @param {?=} updateSyncedCharts
     * @return {?}
     */
    ChartComponent.prototype.updateOptions = /**
     * @param {?} options
     * @param {?=} redrawPaths
     * @param {?=} animate
     * @param {?=} updateSyncedCharts
     * @return {?}
     */
    function (options, redrawPaths, animate, updateSyncedCharts) {
        return this.chartObj.updateOptions(options, redrawPaths, animate, updateSyncedCharts);
    };
    /**
     * @param {?} newSeries
     * @param {?=} animate
     * @return {?}
     */
    ChartComponent.prototype.updateSeries = /**
     * @param {?} newSeries
     * @param {?=} animate
     * @return {?}
     */
    function (newSeries, animate) {
        this.chartObj.updateSeries(newSeries, animate);
    };
    /**
     * @param {?} newSeries
     * @param {?=} animate
     * @return {?}
     */
    ChartComponent.prototype.appendSeries = /**
     * @param {?} newSeries
     * @param {?=} animate
     * @return {?}
     */
    function (newSeries, animate) {
        this.chartObj.appendSeries(newSeries, animate);
    };
    /**
     * @param {?} seriesName
     * @return {?}
     */
    ChartComponent.prototype.toggleSeries = /**
     * @param {?} seriesName
     * @return {?}
     */
    function (seriesName) {
        return this.chartObj.toggleSeries(seriesName);
    };
    /**
     * @param {?} seriesName
     * @return {?}
     */
    ChartComponent.prototype.showSeries = /**
     * @param {?} seriesName
     * @return {?}
     */
    function (seriesName) {
        this.chartObj.showSeries(seriesName);
    };
    /**
     * @param {?} seriesName
     * @return {?}
     */
    ChartComponent.prototype.hideSeries = /**
     * @param {?} seriesName
     * @return {?}
     */
    function (seriesName) {
        this.chartObj.hideSeries(seriesName);
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.resetSeries = /**
     * @return {?}
     */
    function () {
        this.chartObj.resetSeries();
    };
    /**
     * @param {?} seriesIndex
     * @param {?=} dataPointIndex
     * @return {?}
     */
    ChartComponent.prototype.toggleDataPointSelection = /**
     * @param {?} seriesIndex
     * @param {?=} dataPointIndex
     * @return {?}
     */
    function (seriesIndex, dataPointIndex) {
        this.chartObj.toggleDataPointSelection(seriesIndex, dataPointIndex);
    };
    /**
     * @param {?} options
     * @param {?=} pushToMemory
     * @param {?=} context
     * @return {?}
     */
    ChartComponent.prototype.addXaxisAnnotation = /**
     * @param {?} options
     * @param {?=} pushToMemory
     * @param {?=} context
     * @return {?}
     */
    function (options, pushToMemory, context) {
        this.chartObj.addXaxisAnnotation(options, pushToMemory, context);
    };
    /**
     * @param {?} options
     * @param {?=} pushToMemory
     * @param {?=} context
     * @return {?}
     */
    ChartComponent.prototype.addYaxisAnnotation = /**
     * @param {?} options
     * @param {?=} pushToMemory
     * @param {?=} context
     * @return {?}
     */
    function (options, pushToMemory, context) {
        this.chartObj.addYaxisAnnotation(options, pushToMemory, context);
    };
    /**
     * @param {?} options
     * @param {?=} pushToMemory
     * @param {?=} context
     * @return {?}
     */
    ChartComponent.prototype.addPointAnnotation = /**
     * @param {?} options
     * @param {?=} pushToMemory
     * @param {?=} context
     * @return {?}
     */
    function (options, pushToMemory, context) {
        this.chartObj.addPointAnnotation(options, pushToMemory, context);
    };
    /**
     * @param {?} id
     * @param {?=} options
     * @return {?}
     */
    ChartComponent.prototype.removeAnnotation = /**
     * @param {?} id
     * @param {?=} options
     * @return {?}
     */
    function (id, options) {
        this.chartObj.removeAnnotation(id, options);
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    ChartComponent.prototype.clearAnnotations = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        this.chartObj.clearAnnotations(options);
    };
    /**
     * @param {?} options
     * @param {?=} pushToMemory
     * @param {?=} context
     * @return {?}
     */
    ChartComponent.prototype.addText = /**
     * @param {?} options
     * @param {?=} pushToMemory
     * @param {?=} context
     * @return {?}
     */
    function (options, pushToMemory, context) {
        this.chartObj.addText(options, pushToMemory, context);
    };
    /**
     * @param {?} options
     * @param {?=} pushToMemory
     * @param {?=} context
     * @return {?}
     */
    ChartComponent.prototype.addRect = /**
     * @param {?} options
     * @param {?=} pushToMemory
     * @param {?=} context
     * @return {?}
     */
    function (options, pushToMemory, context) {
        this.chartObj.addRect(options, pushToMemory, context);
    };
    /**
     * @param {?} options
     * @param {?=} pushToMemory
     * @param {?=} context
     * @return {?}
     */
    ChartComponent.prototype.addImage = /**
     * @param {?} options
     * @param {?=} pushToMemory
     * @param {?=} context
     * @return {?}
     */
    function (options, pushToMemory, context) {
        this.chartObj.addImage(options, pushToMemory, context);
    };
    /**
     * @param {?=} localeName
     * @return {?}
     */
    ChartComponent.prototype.setLocale = /**
     * @param {?=} localeName
     * @return {?}
     */
    function (localeName) {
        this.chartObj.setLocale(localeName);
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.dataURI = /**
     * @return {?}
     */
    function () {
        return this.chartObj.dataURI();
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.paper = /**
     * @return {?}
     */
    function () {
        this.chartObj.paper();
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.chartObj.destroy();
    };
    ChartComponent.propDecorators = {
        chart: [{ type: Input }],
        annotations: [{ type: Input }],
        colors: [{ type: Input }],
        dataLabels: [{ type: Input }],
        series: [{ type: Input }],
        stroke: [{ type: Input }],
        labels: [{ type: Input }],
        legend: [{ type: Input }],
        markers: [{ type: Input }],
        noData: [{ type: Input }],
        fill: [{ type: Input }],
        tooltip: [{ type: Input }],
        plotOptions: [{ type: Input }],
        responsive: [{ type: Input }],
        xaxis: [{ type: Input }],
        yaxis: [{ type: Input }],
        grid: [{ type: Input }],
        states: [{ type: Input }],
        title: [{ type: Input }],
        subtitle: [{ type: Input }],
        theme: [{ type: Input }],
        autoUpdateSeries: [{ type: Input }],
        chartElement: [{ type: ViewChild, args: ["chart", { static: true },] }]
    };
ChartComponent.Éµfac = function ChartComponent_Factory(t) { return new (t || ChartComponent)(); };
ChartComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({ type: ChartComponent, selectors: [["apx-chart"]], viewQuery: function ChartComponent_Query(rf, ctx) { if (rf & 1) {
        Éµngcc0.ÉµÉµstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.chartElement = _t.first);
    } }, inputs: { autoUpdateSeries: "autoUpdateSeries", chart: "chart", annotations: "annotations", colors: "colors", dataLabels: "dataLabels", series: "series", stroke: "stroke", labels: "labels", legend: "legend", markers: "markers", noData: "noData", fill: "fill", tooltip: "tooltip", plotOptions: "plotOptions", responsive: "responsive", xaxis: "xaxis", yaxis: "yaxis", grid: "grid", states: "states", title: "title", subtitle: "subtitle", theme: "theme" }, features: [Éµngcc0.ÉµÉµNgOnChangesFeature], decls: 2, vars: 0, consts: [["chart", ""]], template: function ChartComponent_Template(rf, ctx) { if (rf & 1) {
        Éµngcc0.ÉµÉµelement(0, "div", null, 0);
    } }, styles: [""] });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(ChartComponent, [{
        type: Component,
        args: [{
                selector: "apx-chart",
                template: "<div #chart></div>\n",
                styles: [""]
            }]
    }], function () { return []; }, { autoUpdateSeries: [{
            type: Input
        }], chart: [{
            type: Input
        }], annotations: [{
            type: Input
        }], colors: [{
            type: Input
        }], dataLabels: [{
            type: Input
        }], series: [{
            type: Input
        }], stroke: [{
            type: Input
        }], labels: [{
            type: Input
        }], legend: [{
            type: Input
        }], markers: [{
            type: Input
        }], noData: [{
            type: Input
        }], fill: [{
            type: Input
        }], tooltip: [{
            type: Input
        }], plotOptions: [{
            type: Input
        }], responsive: [{
            type: Input
        }], xaxis: [{
            type: Input
        }], yaxis: [{
            type: Input
        }], grid: [{
            type: Input
        }], states: [{
            type: Input
        }], title: [{
            type: Input
        }], subtitle: [{
            type: Input
        }], theme: [{
            type: Input
        }], chartElement: [{
            type: ViewChild,
            args: ["chart", { static: true }]
        }] }); })();
    return ChartComponent;
}());
export { ChartComponent };
if (false) {
    /** @type {?} */
    ChartComponent.prototype.chart;
    /** @type {?} */
    ChartComponent.prototype.annotations;
    /** @type {?} */
    ChartComponent.prototype.colors;
    /** @type {?} */
    ChartComponent.prototype.dataLabels;
    /** @type {?} */
    ChartComponent.prototype.series;
    /** @type {?} */
    ChartComponent.prototype.stroke;
    /** @type {?} */
    ChartComponent.prototype.labels;
    /** @type {?} */
    ChartComponent.prototype.legend;
    /** @type {?} */
    ChartComponent.prototype.markers;
    /** @type {?} */
    ChartComponent.prototype.noData;
    /** @type {?} */
    ChartComponent.prototype.fill;
    /** @type {?} */
    ChartComponent.prototype.tooltip;
    /** @type {?} */
    ChartComponent.prototype.plotOptions;
    /** @type {?} */
    ChartComponent.prototype.responsive;
    /** @type {?} */
    ChartComponent.prototype.xaxis;
    /** @type {?} */
    ChartComponent.prototype.yaxis;
    /** @type {?} */
    ChartComponent.prototype.grid;
    /** @type {?} */
    ChartComponent.prototype.states;
    /** @type {?} */
    ChartComponent.prototype.title;
    /** @type {?} */
    ChartComponent.prototype.subtitle;
    /** @type {?} */
    ChartComponent.prototype.theme;
    /** @type {?} */
    ChartComponent.prototype.autoUpdateSeries;
    /**
     * @type {?}
     * @private
     */
    ChartComponent.prototype.chartElement;
    /**
     * @type {?}
     * @private
     */
    ChartComponent.prototype.chartObj;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJuZy1hcGV4Y2hhcnRzL2xpYi9jaGFydC9jaGFydC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBS0wsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBc0J2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXJDLE9BQU8sRUFBRSxPQUFPLElBQUksVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFDOzs7O0FBRW5EO0FBRVksSUFGWjtBQUNlLFFBMkJKLHFCQUFnQixHQUFHLElBQUksQ0FBQztBQUNuQyxJQTROQSxDQUFDO0FBQ0Q7QUFBUTtBQUFtQjtBQUFRLElBek5qQyxpQ0FBUTtBQUNSO0FBQW1CO0FBQVEsSUFEM0I7QUFDRCxRQURDLGlCQUlDO0FBQ0gsUUFKSSxhQUFhLENBQUMsUUFBUTtBQUFNO0FBQ1o7QUFDaEIsUUFGdUI7QUFDckIsWUFBQSxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDM0IsUUFBSSxDQUFDLEVBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFBMEI7QUFDM0I7QUFBUSxJQURiLG9DQUFXO0FBQU87QUFDcEI7QUFBbUI7QUFBUSxJQUR6QixVQUFZLE9BQXNCO0FBQUksUUFBdEMsaUJBWUM7QUFDSCxRQVpJLGFBQWEsQ0FBQyxRQUFRO0FBQU07QUFFdkI7QUFBWSxRQUZNO0FBQ3JCLFlBQUEsSUFDRSxLQUFJLENBQUMsZ0JBQWdCO0FBQzdCLGdCQUFRLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTTtBQUFNO0FBQ3RDO0FBQ3FCO0FBQW9CLGdCQUZSLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxLQUFLLFFBQVEsRUFBZCxDQUFjLEVBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUM3RDtBQUNSLGdCQUFRLEtBQUks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QUFxQixJQUFuQixxQ0FBc0M7QUFDeEM7QUFBcUIsSUFBbkIsb0NBQXNDO0FBQ3hDO0FBQXFCLElBQW5CLCtCQUEwQjtBQUM1QjtBQUFxQixJQUFuQiwrQkFBd0M7QUFDMUM7QUFBcUIsSUFBbkIsOEJBQXdCO0FBQzFCO0FBQXFCLElBQW5CLGdDQUE0QjtBQUM5QjtBQUFxQixJQUFuQiwrQkFBa0M7QUFDcEM7QUFBcUIsSUFBbkIsa0NBQXFDO0FBQ3ZDO0FBQXFCLElBQW5CLCtCQUEwQjtBQUM1QjtBQUNvQixJQUFsQiwwQ0FBaUM7QUFDbkM7QUFDTztBQUFpQjtBQUFnQjtBQUFRLElBQTlDLHNDQUF1RTtBQUN6RTtBQUFRO0FBQ1I7QUFFQTtBQUFRLElBSE4sa0NBQXNCO0FBQ3hCO0FBQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uSW5pdCxcbiAgT25EZXN0cm95LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7XG4gIEFwZXhBbm5vdGF0aW9ucyxcbiAgQXBleEF4aXNDaGFydFNlcmllcyxcbiAgQXBleENoYXJ0LFxuICBBcGV4RGF0YUxhYmVscyxcbiAgQXBleEZpbGwsXG4gIEFwZXhHcmlkLFxuICBBcGV4TGVnZW5kLFxuICBBcGV4Tm9uQXhpc0NoYXJ0U2VyaWVzLFxuICBBcGV4TWFya2VycyxcbiAgQXBleE5vRGF0YSxcbiAgQXBleFBsb3RPcHRpb25zLFxuICBBcGV4UmVzcG9uc2l2ZSxcbiAgQXBleFN0YXRlcyxcbiAgQXBleFN0cm9rZSxcbiAgQXBleFRoZW1lLFxuICBBcGV4VGl0bGVTdWJ0aXRsZSxcbiAgQXBleFRvb2x0aXAsXG4gIEFwZXhYQXhpcyxcbiAgQXBleFlBeGlzXG59IGZyb20gXCIuLi9tb2RlbC9hcGV4LXR5cGVzXCI7XG5pbXBvcnQgeyBhc2FwU2NoZWR1bGVyIH0gZnJvbSBcInJ4anNcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBBcGV4Q2hhcnRzIH0gZnJvbSBcImFwZXhjaGFydHNcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcImFweC1jaGFydFwiLFxuICB0ZW1wbGF0ZVVybDogXCIuL2NoYXJ0LmNvbXBvbmVudC5odG1sXCIsXG4gIHN0eWxlVXJsczogW1wiLi9jaGFydC5jb21wb25lbnQuY3NzXCJdXG59KVxuZXhwb3J0IGNsYXNzIENoYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGNoYXJ0OiBBcGV4Q2hhcnQ7XG4gIEBJbnB1dCgpIGFubm90YXRpb25zOiBBcGV4QW5ub3RhdGlvbnM7XG4gIEBJbnB1dCgpIGNvbG9yczogYW55W107XG4gIEBJbnB1dCgpIGRhdGFMYWJlbHM6IEFwZXhEYXRhTGFiZWxzO1xuICBASW5wdXQoKSBzZXJpZXM6IEFwZXhBeGlzQ2hhcnRTZXJpZXMgfCBBcGV4Tm9uQXhpc0NoYXJ0U2VyaWVzO1xuICBASW5wdXQoKSBzdHJva2U6IEFwZXhTdHJva2U7XG4gIEBJbnB1dCgpIGxhYmVsczogc3RyaW5nW107XG4gIEBJbnB1dCgpIGxlZ2VuZDogQXBleExlZ2VuZDtcbiAgQElucHV0KCkgbWFya2VyczogQXBleE1hcmtlcnM7XG4gIEBJbnB1dCgpIG5vRGF0YTogQXBleE5vRGF0YTtcbiAgQElucHV0KCkgZmlsbDogQXBleEZpbGw7XG4gIEBJbnB1dCgpIHRvb2x0aXA6IEFwZXhUb29sdGlwO1xuICBASW5wdXQoKSBwbG90T3B0aW9uczogQXBleFBsb3RPcHRpb25zO1xuICBASW5wdXQoKSByZXNwb25zaXZlOiBBcGV4UmVzcG9uc2l2ZVtdO1xuICBASW5wdXQoKSB4YXhpczogQXBleFhBeGlzO1xuICBASW5wdXQoKSB5YXhpczogQXBleFlBeGlzIHwgQXBleFlBeGlzW107XG4gIEBJbnB1dCgpIGdyaWQ6IEFwZXhHcmlkO1xuICBASW5wdXQoKSBzdGF0ZXM6IEFwZXhTdGF0ZXM7XG4gIEBJbnB1dCgpIHRpdGxlOiBBcGV4VGl0bGVTdWJ0aXRsZTtcbiAgQElucHV0KCkgc3VidGl0bGU6IEFwZXhUaXRsZVN1YnRpdGxlO1xuICBASW5wdXQoKSB0aGVtZTogQXBleFRoZW1lO1xuXG4gIEBJbnB1dCgpIGF1dG9VcGRhdGVTZXJpZXMgPSB0cnVlO1xuXG4gIEBWaWV3Q2hpbGQoXCJjaGFydFwiLCB7IHN0YXRpYzogdHJ1ZSB9KSBwcml2YXRlIGNoYXJ0RWxlbWVudDogRWxlbWVudFJlZjtcbiAgcHJpdmF0ZSBjaGFydE9iajogYW55O1xuXG4gIG5nT25Jbml0KCkge1xuICAgIGFzYXBTY2hlZHVsZXIuc2NoZWR1bGUoKCkgPT4ge1xuICAgICAgdGhpcy5jcmVhdGVFbGVtZW50KCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgYXNhcFNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuYXV0b1VwZGF0ZVNlcmllcyAmJlxuICAgICAgICBPYmplY3Qua2V5cyhjaGFuZ2VzKS5maWx0ZXIoYyA9PiBjICE9PSBcInNlcmllc1wiKS5sZW5ndGggPT09IDBcbiAgICAgICkge1xuICAgICAgICB0aGlzLnVwZGF0ZVNlcmllcyh0aGlzLnNlcmllcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jcmVhdGVFbGVtZW50KCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5jaGFydE9iaikge1xuICAgICAgdGhpcy5jaGFydE9iai5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVFbGVtZW50KCkge1xuICAgIGNvbnN0IG9wdGlvbnM6IGFueSA9IHt9O1xuXG4gICAgaWYgKHRoaXMuYW5ub3RhdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMuYW5ub3RhdGlvbnMgPSB0aGlzLmFubm90YXRpb25zO1xuICAgIH1cbiAgICBpZiAodGhpcy5jaGFydCkge1xuICAgICAgb3B0aW9ucy5jaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbG9ycykge1xuICAgICAgb3B0aW9ucy5jb2xvcnMgPSB0aGlzLmNvbG9ycztcbiAgICB9XG4gICAgaWYgKHRoaXMuZGF0YUxhYmVscykge1xuICAgICAgb3B0aW9ucy5kYXRhTGFiZWxzID0gdGhpcy5kYXRhTGFiZWxzO1xuICAgIH1cbiAgICBpZiAodGhpcy5zZXJpZXMpIHtcbiAgICAgIG9wdGlvbnMuc2VyaWVzID0gdGhpcy5zZXJpZXM7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cm9rZSkge1xuICAgICAgb3B0aW9ucy5zdHJva2UgPSB0aGlzLnN0cm9rZTtcbiAgICB9XG4gICAgaWYgKHRoaXMubGFiZWxzKSB7XG4gICAgICBvcHRpb25zLmxhYmVscyA9IHRoaXMubGFiZWxzO1xuICAgIH1cbiAgICBpZiAodGhpcy5sZWdlbmQpIHtcbiAgICAgIG9wdGlvbnMubGVnZW5kID0gdGhpcy5sZWdlbmQ7XG4gICAgfVxuICAgIGlmICh0aGlzLmZpbGwpIHtcbiAgICAgIG9wdGlvbnMuZmlsbCA9IHRoaXMuZmlsbDtcbiAgICB9XG4gICAgaWYgKHRoaXMudG9vbHRpcCkge1xuICAgICAgb3B0aW9ucy50b29sdGlwID0gdGhpcy50b29sdGlwO1xuICAgIH1cbiAgICBpZiAodGhpcy5wbG90T3B0aW9ucykge1xuICAgICAgb3B0aW9ucy5wbG90T3B0aW9ucyA9IHRoaXMucGxvdE9wdGlvbnM7XG4gICAgfVxuICAgIGlmICh0aGlzLnJlc3BvbnNpdmUpIHtcbiAgICAgIG9wdGlvbnMucmVzcG9uc2l2ZSA9IHRoaXMucmVzcG9uc2l2ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMubWFya2Vycykge1xuICAgICAgb3B0aW9ucy5tYXJrZXJzID0gdGhpcy5tYXJrZXJzO1xuICAgIH1cbiAgICBpZiAodGhpcy5ub0RhdGEpIHtcbiAgICAgIG9wdGlvbnMubm9EYXRhID0gdGhpcy5ub0RhdGE7XG4gICAgfVxuICAgIGlmICh0aGlzLnhheGlzKSB7XG4gICAgICBvcHRpb25zLnhheGlzID0gdGhpcy54YXhpcztcbiAgICB9XG4gICAgaWYgKHRoaXMueWF4aXMpIHtcbiAgICAgIG9wdGlvbnMueWF4aXMgPSB0aGlzLnlheGlzO1xuICAgIH1cbiAgICBpZiAodGhpcy5ncmlkKSB7XG4gICAgICBvcHRpb25zLmdyaWQgPSB0aGlzLmdyaWQ7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlcykge1xuICAgICAgb3B0aW9ucy5zdGF0ZXMgPSB0aGlzLnN0YXRlcztcbiAgICB9XG4gICAgaWYgKHRoaXMudGl0bGUpIHtcbiAgICAgIG9wdGlvbnMudGl0bGUgPSB0aGlzLnRpdGxlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdWJ0aXRsZSkge1xuICAgICAgb3B0aW9ucy5zdWJ0aXRsZSA9IHRoaXMuc3VidGl0bGU7XG4gICAgfVxuICAgIGlmICh0aGlzLnRoZW1lKSB7XG4gICAgICBvcHRpb25zLnRoZW1lID0gdGhpcy50aGVtZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jaGFydE9iaikge1xuICAgICAgdGhpcy5jaGFydE9iai5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdGhpcy5jaGFydE9iaiA9IG5ldyBBcGV4Q2hhcnRzKHRoaXMuY2hhcnRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnRPYmoucmVuZGVyKCk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBhbnksXG4gICAgcmVkcmF3UGF0aHM/OiBib29sZWFuLFxuICAgIGFuaW1hdGU/OiBib29sZWFuLFxuICAgIHVwZGF0ZVN5bmNlZENoYXJ0cz86IGJvb2xlYW5cbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnRPYmoudXBkYXRlT3B0aW9ucyhcbiAgICAgIG9wdGlvbnMsXG4gICAgICByZWRyYXdQYXRocyxcbiAgICAgIGFuaW1hdGUsXG4gICAgICB1cGRhdGVTeW5jZWRDaGFydHNcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZVNlcmllcyhcbiAgICBuZXdTZXJpZXM6IEFwZXhBeGlzQ2hhcnRTZXJpZXMgfCBBcGV4Tm9uQXhpc0NoYXJ0U2VyaWVzLFxuICAgIGFuaW1hdGU/OiBib29sZWFuXG4gICkge1xuICAgIHRoaXMuY2hhcnRPYmoudXBkYXRlU2VyaWVzKG5ld1NlcmllcywgYW5pbWF0ZSk7XG4gIH1cblxuICBwdWJsaWMgYXBwZW5kU2VyaWVzKFxuICAgIG5ld1NlcmllczogQXBleEF4aXNDaGFydFNlcmllcyB8IEFwZXhOb25BeGlzQ2hhcnRTZXJpZXMsXG4gICAgYW5pbWF0ZT86IGJvb2xlYW5cbiAgKSB7XG4gICAgdGhpcy5jaGFydE9iai5hcHBlbmRTZXJpZXMobmV3U2VyaWVzLCBhbmltYXRlKTtcbiAgfVxuXG4gIHB1YmxpYyB0b2dnbGVTZXJpZXMoc2VyaWVzTmFtZTogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5jaGFydE9iai50b2dnbGVTZXJpZXMoc2VyaWVzTmFtZSk7XG4gIH1cblxuICBwdWJsaWMgc2hvd1NlcmllcyhzZXJpZXNOYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNoYXJ0T2JqLnNob3dTZXJpZXMoc2VyaWVzTmFtZSk7XG4gIH1cblxuICBwdWJsaWMgaGlkZVNlcmllcyhzZXJpZXNOYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNoYXJ0T2JqLmhpZGVTZXJpZXMoc2VyaWVzTmFtZSk7XG4gIH1cblxuICBwdWJsaWMgcmVzZXRTZXJpZXMoKSB7XG4gICAgdGhpcy5jaGFydE9iai5yZXNldFNlcmllcygpO1xuICB9XG5cbiAgcHVibGljIHRvZ2dsZURhdGFQb2ludFNlbGVjdGlvbihcbiAgICBzZXJpZXNJbmRleDogbnVtYmVyLFxuICAgIGRhdGFQb2ludEluZGV4PzogbnVtYmVyXG4gICkge1xuICAgIHRoaXMuY2hhcnRPYmoudG9nZ2xlRGF0YVBvaW50U2VsZWN0aW9uKHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCk7XG4gIH1cblxuICBwdWJsaWMgYWRkWGF4aXNBbm5vdGF0aW9uKFxuICAgIG9wdGlvbnM6IGFueSxcbiAgICBwdXNoVG9NZW1vcnk/OiBib29sZWFuLFxuICAgIGNvbnRleHQ/OiBhbnlcbiAgKSB7XG4gICAgdGhpcy5jaGFydE9iai5hZGRYYXhpc0Fubm90YXRpb24ob3B0aW9ucywgcHVzaFRvTWVtb3J5LCBjb250ZXh0KTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRZYXhpc0Fubm90YXRpb24oXG4gICAgb3B0aW9uczogYW55LFxuICAgIHB1c2hUb01lbW9yeT86IGJvb2xlYW4sXG4gICAgY29udGV4dD86IGFueVxuICApIHtcbiAgICB0aGlzLmNoYXJ0T2JqLmFkZFlheGlzQW5ub3RhdGlvbihvcHRpb25zLCBwdXNoVG9NZW1vcnksIGNvbnRleHQpO1xuICB9XG5cbiAgcHVibGljIGFkZFBvaW50QW5ub3RhdGlvbihcbiAgICBvcHRpb25zOiBhbnksXG4gICAgcHVzaFRvTWVtb3J5PzogYm9vbGVhbixcbiAgICBjb250ZXh0PzogYW55XG4gICkge1xuICAgIHRoaXMuY2hhcnRPYmouYWRkUG9pbnRBbm5vdGF0aW9uKG9wdGlvbnMsIHB1c2hUb01lbW9yeSwgY29udGV4dCk7XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlQW5ub3RhdGlvbihpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgdGhpcy5jaGFydE9iai5yZW1vdmVBbm5vdGF0aW9uKGlkLCBvcHRpb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhckFubm90YXRpb25zKG9wdGlvbnM/OiBhbnkpIHtcbiAgICB0aGlzLmNoYXJ0T2JqLmNsZWFyQW5ub3RhdGlvbnMob3B0aW9ucyk7XG4gIH1cblxuICBwdWJsaWMgYWRkVGV4dChvcHRpb25zOiBhbnksIHB1c2hUb01lbW9yeT86IGJvb2xlYW4sIGNvbnRleHQ/OiBhbnkpIHtcbiAgICB0aGlzLmNoYXJ0T2JqLmFkZFRleHQob3B0aW9ucywgcHVzaFRvTWVtb3J5LCBjb250ZXh0KTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRSZWN0KG9wdGlvbnM6IGFueSwgcHVzaFRvTWVtb3J5PzogYm9vbGVhbiwgY29udGV4dD86IGFueSkge1xuICAgIHRoaXMuY2hhcnRPYmouYWRkUmVjdChvcHRpb25zLCBwdXNoVG9NZW1vcnksIGNvbnRleHQpO1xuICB9XG5cbiAgcHVibGljIGFkZEltYWdlKG9wdGlvbnM6IGFueSwgcHVzaFRvTWVtb3J5PzogYm9vbGVhbiwgY29udGV4dD86IGFueSkge1xuICAgIHRoaXMuY2hhcnRPYmouYWRkSW1hZ2Uob3B0aW9ucywgcHVzaFRvTWVtb3J5LCBjb250ZXh0KTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRMb2NhbGUobG9jYWxlTmFtZT86IHN0cmluZykge1xuICAgIHRoaXMuY2hhcnRPYmouc2V0TG9jYWxlKGxvY2FsZU5hbWUpO1xuICB9XG5cbiAgcHVibGljIGRhdGFVUkkoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnRPYmouZGF0YVVSSSgpO1xuICB9XG5cbiAgcHVibGljIHBhcGVyKCkge1xuICAgIHRoaXMuY2hhcnRPYmoucGFwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIHRoaXMuY2hhcnRPYmouZGVzdHJveSgpO1xuICB9XG59XG4iXX0=